[{"categories":["github"],"content":"通过修改hosts解决github过慢或无法访问","date":"2022-11-21","objectID":"/posts/2022-11-21-ways-to-fix-github-being-too-slow/","tags":["github"],"title":"解决github过慢或无法访问的方法","uri":"/posts/2022-11-21-ways-to-fix-github-being-too-slow/"},{"categories":["github"],"content":"前言 github在国内，有时会遇到打不开或者过慢的问题。这么好的东西，竟然不给用，这就很过分了，经过测试，绝大多数是DNS解析的问题，有可能是DNS污染，也有可能是有意为之，尤其国内几个基础运营商默认的DNS，对于github和它的相关域名，解析结果大多数为 0.0.0.0 或 127.0.0.1，v站上众多开发者测试都是这个结果。我测试了自己广州电信的网络，raw.githubusercontent.com也无法打开。参看（需要爬墙）v站帖子。 ","date":"2022-11-21","objectID":"/posts/2022-11-21-ways-to-fix-github-being-too-slow/:1:0","tags":["github"],"title":"解决github过慢或无法访问的方法","uri":"/posts/2022-11-21-ways-to-fix-github-being-too-slow/"},{"categories":["github"],"content":"方法 DNS解析这个问题，最简单的方式修改本机hosts文件，通过直接指定域名对应ip来实现访问，需要注意的是，所有厂家服务器的ip都可能会变的，域名解析出来的ip不是永远不变的，因此需要及时检查。 ","date":"2022-11-21","objectID":"/posts/2022-11-21-ways-to-fix-github-being-too-slow/:2:0","tags":["github"],"title":"解决github过慢或无法访问的方法","uri":"/posts/2022-11-21-ways-to-fix-github-being-too-slow/"},{"categories":["github"],"content":"hosts作用： 我们访问一个网站时，系统会优先在hosts文件里检查是否有这个ip域名的地址映射关系，如有就直接使用这个ip地址，如无，才会去DNS服务器把查询其IP地址，以供计算机访问。 所以hosts里地址映射查询，是在DNS解析之前的。 ","date":"2022-11-21","objectID":"/posts/2022-11-21-ways-to-fix-github-being-too-slow/:2:1","tags":["github"],"title":"解决github过慢或无法访问的方法","uri":"/posts/2022-11-21-ways-to-fix-github-being-too-slow/"},{"categories":["github"],"content":"hosts文件所在位置： Linux / MacOS hosts路径：/etc/hosts Windows hosts路径：C:\\Windows\\System32\\drivers\\etc\\hosts ","date":"2022-11-21","objectID":"/posts/2022-11-21-ways-to-fix-github-being-too-slow/:2:2","tags":["github"],"title":"解决github过慢或无法访问的方法","uri":"/posts/2022-11-21-ways-to-fix-github-being-too-slow/"},{"categories":["github"],"content":"工具推荐 ","date":"2022-11-21","objectID":"/posts/2022-11-21-ways-to-fix-github-being-too-slow/:3:0","tags":["github"],"title":"解决github过慢或无法访问的方法","uri":"/posts/2022-11-21-ways-to-fix-github-being-too-slow/"},{"categories":["github"],"content":"查域名ip网站 www.ipaddress.com 通过查询域名对应的ip地址，手动添加ip域名到hosts文件。 比如我发现我电脑上 https://raw.githubusercontent.com/ 不能访问，在 www.ipaddress.com 查询发现，它有4个ipv4和4个ipv6，ipv4可以ping通，因此将ipv4的ip添加到hosts文件中，同个可以同时添加多个ip，访问时从第一个开始获取，解析失败时顺延第二个。添加格式： 185.199.108.133 raw.githubusercontent.com 185.199.109.133 raw.githubusercontent.com 添加后，就可以直接访问 https://raw.githubusercontent.com/ 了。 ","date":"2022-11-21","objectID":"/posts/2022-11-21-ways-to-fix-github-being-too-slow/:3:1","tags":["github"],"title":"解决github过慢或无法访问的方法","uri":"/posts/2022-11-21-ways-to-fix-github-being-too-slow/"},{"categories":["github"],"content":"检查是否被墙 https://www.vps234.com/ipchecker/ 这是一个测试IP是否被封的网站工具，通过ICMP和TCP来检查，输入ip后查看测试结果ICMP和ping一样，TCP就好比是检测该IP的Linux VPS能否通过SSH连接。国内外都一致即说明没被墙。不过我测试111发现有时可以有时不行，不是很稳定。 ","date":"2022-11-21","objectID":"/posts/2022-11-21-ways-to-fix-github-being-too-slow/:3:2","tags":["github"],"title":"解决github过慢或无法访问的方法","uri":"/posts/2022-11-21-ways-to-fix-github-being-too-slow/"},{"categories":["github"],"content":"开源自动获取工具Fetch GitHub Hosts Fetch GitHub Hosts是一个非常有用的工具，在github上开源，它解决了实时监控和同步github hosts的问题。 它的原理是通过部署此项目本身的服务器来获取 github.com 的 hosts，而不是通过第三方ip地址接口来进行获取，例如 ipaddress.com 等。 值得注意的 Fetch GitHub Hosts获取的hosts 上github的ip和ipaddress.com上查的不一定一样，不同地区请求的github地址可能分发向不同的服务器。 Fetch GitHub Hosts 使用很简单，支持全平台，支持客户端和服务端运行，有运行界面，也可以做成服务在后台运行。可以设置自动获取hosts的时间间隔和或hosts源。因此非常方便。当然你可以复制他的hosts源https://hosts.gitcdn.top/hosts.txt进行手动进行更新。 ","date":"2022-11-21","objectID":"/posts/2022-11-21-ways-to-fix-github-being-too-slow/:3:3","tags":["github"],"title":"解决github过慢或无法访问的方法","uri":"/posts/2022-11-21-ways-to-fix-github-being-too-slow/"},{"categories":["github"],"content":"参考 Fetch GitHub Hosts[https://hosts.gitcdn.top/] https://learnku.com/articles/43426 ","date":"2022-11-21","objectID":"/posts/2022-11-21-ways-to-fix-github-being-too-slow/:4:0","tags":["github"],"title":"解决github过慢或无法访问的方法","uri":"/posts/2022-11-21-ways-to-fix-github-being-too-slow/"},{"categories":["微软"],"content":"快速对word中的图片批量调整统一的长宽比例大小","date":"2022-11-18","objectID":"/posts/2022-11-18-word-pic-format-painter/","tags":["Microsoft"],"title":"word中图片批量调整统一长宽比例大小","uri":"/posts/2022-11-18-word-pic-format-painter/"},{"categories":["微软"],"content":"前言 word中有格式刷功能，标题样式，文字大小和样式，图片样式（如阴影效果），这些都可以直接格式刷，但是图片长宽比例大小无法格式刷，这里提供一个快速的解决方式，批量统一调整长宽比例和大小。 ","date":"2022-11-18","objectID":"/posts/2022-11-18-word-pic-format-painter/:1:0","tags":["Microsoft"],"title":"word中图片批量调整统一长宽比例大小","uri":"/posts/2022-11-18-word-pic-format-painter/"},{"categories":["微软"],"content":"解决痛点 适合批量调整图片统一大小和长宽，统一比例，统一大小尺寸（不含样式），尤其在word贴手机截图这种竖向图的时候，通常是偏大的，一个一个调整不仅非常难对整齐，还非常耗时间。 ","date":"2022-11-18","objectID":"/posts/2022-11-18-word-pic-format-painter/:2:0","tags":["Microsoft"],"title":"word中图片批量调整统一长宽比例大小","uri":"/posts/2022-11-18-word-pic-format-painter/"},{"categories":["微软"],"content":"图片长宽比例大小格式刷 先调整一张图为合适大小和比例，作为模板图，操作步骤： 选中模板图，右键，大小和位置，锁定纵横比 前面的勾去掉，确定保存。 选择其他其他你要刷成同比例大小的图，按F4键，即可刷成和模板图一样长宽大小比例。每张图都点击按F4一下即可，快速刷完所有图。 ","date":"2022-11-18","objectID":"/posts/2022-11-18-word-pic-format-painter/:3:0","tags":["Microsoft"],"title":"word中图片批量调整统一长宽比例大小","uri":"/posts/2022-11-18-word-pic-format-painter/"},{"categories":["微软"],"content":"总结 使用这个操作，效率直接上天。 ","date":"2022-11-18","objectID":"/posts/2022-11-18-word-pic-format-painter/:4:0","tags":["Microsoft"],"title":"word中图片批量调整统一长宽比例大小","uri":"/posts/2022-11-18-word-pic-format-painter/"},{"categories":["微软"],"content":"通过批处理一键修改微软远程桌面端口","date":"2022-11-18","objectID":"/posts/2022-11-18-change-rdp-port/","tags":["Microsoft"],"title":"一键修改微软远程桌面的端口","uri":"/posts/2022-11-18-change-rdp-port/"},{"categories":["微软"],"content":"前言 市面上有众多远程控制软件，他们有个好处是可以穿透内网，而如果你有公网ip或者会配置穿透的话，建议还是用微软自带的远程桌面连接工具rdp，流畅度和效果体验是最佳的。rdp默认端口是3389，直接暴露在外网的话容易有安全风险，因此一般建议修改该默认端口为其他端口。 ","date":"2022-11-18","objectID":"/posts/2022-11-18-change-rdp-port/:1:0","tags":["Microsoft"],"title":"一键修改微软远程桌面的端口","uri":"/posts/2022-11-18-change-rdp-port/"},{"categories":["微软"],"content":"批处理脚本 这里提供一个脚本，桌面新建一个txt，粘贴以下代码，txt后缀改为bat，双击运行修改默认端口为其他自定义端口： @echo off echo ****修改远程桌面3389端口(支持Windows 2003 2008 2008R2 2012 2012R2 7 8 10 )**** echo. ::echo 自动添加防火墙规则 set /p c= 请输入端口号: if \"%c%\"==\"\" goto end goto edit ::【修改】 :edit echo 正在修改... netsh advfirewall firewall add rule name=\"Remote PortNumber\" dir=in action=allow protocol=TCP localport=\"%c%\" netsh advfirewall firewall add rule name=\"Remote PortNumber\" dir=in action=allow protocol=TCP localport=\"%c%\" reg add \"HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Control\\Terminal Server\\Wds\\rdpwd\\Tds\\tcp\" /v \"PortNumber\" /t REG_DWORD /d \"%c%\" /f reg add \"HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Control\\Terminal Server\\WinStations\\RDP-Tcp\" /v \"PortNumber\" /t REG_DWORD /d \"%c%\" /f echo 修改成功 echo. echo 重启后生效，按任意键重启 echo. set /p ctrl= 输入1重启，其他不重启: if \"%ctrl%\"==\"1\" ( goto restart )else ( goto end ) ::【退出】 :end pause exit ::【重启】 :restart shutdown /r /t 0 exit ","date":"2022-11-18","objectID":"/posts/2022-11-18-change-rdp-port/:2:0","tags":["Microsoft"],"title":"一键修改微软远程桌面的端口","uri":"/posts/2022-11-18-change-rdp-port/"},{"categories":["qq"],"content":"qq/tim群文件的被限速下载如何获得不限速下载的方法","date":"2022-11-17","objectID":"/posts/2022-11-17-qq-file-download/","tags":["qq"],"title":"qq群文件的一种快速下载方法","uri":"/posts/2022-11-17-qq-file-download/"},{"categories":["qq"],"content":"前言 qq群文件正常有10G空间可用，大文件需要管理员手动保存为永久，理论上你建无数个群就能获得无数个10G空间，之前上传下载不限速，近期发现下载限速严重，百兆宽带只有几百k，原先一直用tim，测试后发现qq和tim都是，网上搜了一圈，找到一种目前还能正常全速下载的方式。 ","date":"2022-11-17","objectID":"/posts/2022-11-17-qq-file-download/:1:0","tags":["qq"],"title":"qq群文件的一种快速下载方法","uri":"/posts/2022-11-17-qq-file-download/"},{"categories":["qq"],"content":"解决方式 将群文件转发给一个私人qq，随意一个qq都行，只要不是在群的文件里，这时你再下载，就会发现速度起飞，能直接撑满。 ","date":"2022-11-17","objectID":"/posts/2022-11-17-qq-file-download/:2:0","tags":["qq"],"title":"qq群文件的一种快速下载方法","uri":"/posts/2022-11-17-qq-file-download/"},{"categories":["工具"],"content":"通过cloudflare搭建z-library镜像站","date":"2022-10-18","objectID":"/posts/2022-10-18-build-zlibrary-mirror/","tags":["cloudflare","book"],"title":"2分钟免费自建你的专属z-library镜像站，找书没烦恼","uri":"/posts/2022-10-18-build-zlibrary-mirror/"},{"categories":["工具"],"content":"前言 z-library是全球最大的电子书下载站，资源非常丰富。然而地址经常面临被封禁的问题，国内非常容易被墙，官方也在不断地变换地址。除了寻找别人所做的镜像站之外，另一种最方便的，就是自建镜像站。 今天实操自建一个z-library的镜像站，摆脱被墙困扰，实现免翻下载。 ","date":"2022-10-18","objectID":"/posts/2022-10-18-build-zlibrary-mirror/:1:0","tags":["cloudflare","book"],"title":"2分钟免费自建你的专属z-library镜像站，找书没烦恼","uri":"/posts/2022-10-18-build-zlibrary-mirror/"},{"categories":["工具"],"content":"准备工作 一个自己的域名，可以申请免费域名。 一个cloudflare账号，DNS解析托管到cloudflare。 ","date":"2022-10-18","objectID":"/posts/2022-10-18-build-zlibrary-mirror/:2:0","tags":["cloudflare","book"],"title":"2分钟免费自建你的专属z-library镜像站，找书没烦恼","uri":"/posts/2022-10-18-build-zlibrary-mirror/"},{"categories":["工具"],"content":"cloudflare配置 登录cloudflare管理台后，选择worker，创建一个服务 选择http处理程序，服务名称你自定。这个服务名称xxx就是你这个cloudflare给你生成的三级域名，下面有行提示：您的服务将被部署到：https://xxx.aaaa.workers.dev，aaaa这里是你整个worker里定义名称。不过现在cloudflare提供的这个域名国内都被墙了，所以用不上，这也是我们要准备自己一个域名的原因。 创建完服务，进来点击【资源】–快速编辑，将下面代码替换原有代码，保存。 覆盖添加的代码如下： // 你要镜像的网站. const upstream = 'zh.zlibrary.org' // 镜像网站的目录，比如你想镜像某个网站的二级目录则填写二级目录的目录名，镜像 google 用不到，默认即可. const upstream_path = '/' // 镜像站是否有手机访问专用网址，没有则填一样的. const upstream_mobile = 'zh.1lib.education' // 屏蔽国家和地区. const blocked_region = ['KP', 'SY', 'PK', 'CU'] // 屏蔽 IP 地址. const blocked_ip_address = ['0.0.0.0', '127.0.0.1'] // 镜像站是否开启 HTTPS. const https = true // 文本替换. const replace_dict = { '$upstream': '$custom_domain', } // 以下保持默认，不要动 addEventListener('fetch', event =\u003e { event.respondWith(fetchAndApply(event.request)); }) async function fetchAndApply(request) { const region = request.headers.get('cf-ipcountry').toUpperCase(); const ip_address = request.headers.get('cf-connecting-ip'); const user_agent = request.headers.get('user-agent'); let response = null; let url = new URL(request.url); let url_hostname = url.hostname; if (https == true) { url.protocol = 'https:'; } else { url.protocol = 'http:'; } if (await device_status(user_agent)) { var upstream_domain = upstream; } else { var upstream_domain = upstream_mobile; } url.host = upstream_domain; if (url.pathname == '/') { url.pathname = upstream_path; } else { url.pathname = upstream_path + url.pathname; } if (blocked_region.includes(region)) { response = new Response('Access denied: WorkersProxy is not available in your region yet.', { status: 403 }); } else if (blocked_ip_address.includes(ip_address)) { response = new Response('Access denied: Your IP address is blocked by WorkersProxy.', { status: 403 }); } else { let method = request.method; let request_headers = request.headers; let new_request_headers = new Headers(request_headers); new_request_headers.set('Host', url.hostname); new_request_headers.set('Referer', url.hostname); let original_response = await fetch(url.href, { method: method, headers: new_request_headers }) let original_response_clone = original_response.clone(); let original_text = null; let response_headers = original_response.headers; let new_response_headers = new Headers(response_headers); let status = original_response.status; new_response_headers.set('access-control-allow-origin', '*'); new_response_headers.set('access-control-allow-credentials', true); new_response_headers.delete('content-security-policy'); new_response_headers.delete('content-security-policy-report-only'); new_response_headers.delete('clear-site-data'); const content_type = new_response_headers.get('content-type'); if (content_type.includes('text/html') \u0026\u0026 content_type.includes('UTF-8')) { original_text = await replace_response_text(original_response_clone, upstream_domain, url_hostname); } else { original_text = original_response_clone.body } response = new Response(original_text, { status, headers: new_response_headers }) } return response; } async function replace_response_text(response, upstream_domain, host_name) { let text = await response.text() var i, j; for (i in replace_dict) { j = replace_dict[i] if (i == '$upstream') { i = upstream_domain } else if (i == '$custom_domain') { i = host_name } if (j == '$upstream') { j = upstream_domain } else if (j == '$custom_domain') { j = host_name } let re = new RegExp(i, 'g') text = text.replace(re, j); } return text; } async function device_status(user_agent_info) { var agents = [\"Android\", \"iPhone\", \"SymbianOS\", \"Windows Phone\", \"iPad\", \"iPod\"]; var flag = true; for (var v = 0; v \u003c agents.length; v++) { if (user_agent_info.indexOf(agents[v]) \u003e 0) { flag = false; break; } } return flag; } 回到【触发器】–添加自定义域，添加自己的域名，这个域名需要先托管到cloudflare上。 到此，镜像站已经完成，生效时间虽说24小时，实际一般很快，不到1分钟就生效。 ","date":"2022-10-18","objectID":"/posts/2022-10-18-build-zlibrary-mirror/:3:0","tags":["cloudflare","book"],"title":"2分钟免费自建你的专属z-library镜像站，找书没烦恼","uri":"/posts/2022-10-18-build-zlibrary-mirror/"},{"categories":["工具"],"content":"其他 这里我们利用cloudflare提供的全球cdn，给我们做了代理。免费用户每天worker里服务可以有10万次请求，对于个人而言完全足够用。 需要注意，z-library对每个ip未登录用户每天有5次下载限制，如果你建立镜像站后出现过超过限制，很可能是cloudflare的代理ip的下载次数已经被人用完了。怎么解决呢，换个ip即可，或者最方便的找个修改ip的插件就可以继续用了。 ","date":"2022-10-18","objectID":"/posts/2022-10-18-build-zlibrary-mirror/:4:0","tags":["cloudflare","book"],"title":"2分钟免费自建你的专属z-library镜像站，找书没烦恼","uri":"/posts/2022-10-18-build-zlibrary-mirror/"},{"categories":["工具"],"content":"改ip插件： PC浏览器插件（chrome，edge为主，chromium内核系列）：ModHeader。 使用： ctrl+shift+h唤起插件，或者可以在插件主页里打开，修改请求头 request headers，选择X-Forwarded-For，后面自定义填写ip，ip在正确的IP地址范围即可 。 安卓手机浏览器插件： Header Editor，下载安装Iceraven 浏览器 ，附加组件搜索安装Header Editor，修改请求头，匹配类型填你的域名，执行类型常规，头名称选择X-Forwarded-For，后面自定义填写ip，保存，开启插件即可。 这样你就拥有了自己的z-library镜像站，可以无限制的下载电子书资源了。 ","date":"2022-10-18","objectID":"/posts/2022-10-18-build-zlibrary-mirror/:4:1","tags":["cloudflare","book"],"title":"2分钟免费自建你的专属z-library镜像站，找书没烦恼","uri":"/posts/2022-10-18-build-zlibrary-mirror/"},{"categories":["工具"],"content":"参考 https://www.axutongxue.top/2022/09/8zlibrary.html ","date":"2022-10-18","objectID":"/posts/2022-10-18-build-zlibrary-mirror/:5:0","tags":["cloudflare","book"],"title":"2分钟免费自建你的专属z-library镜像站，找书没烦恼","uri":"/posts/2022-10-18-build-zlibrary-mirror/"},{"categories":["生活"],"content":"广州徒步牛木线","date":"2022-10-09","objectID":"/posts/2022-10-09-hiking/","tags":["锻炼"],"title":"徒步牛木线","uri":"/posts/2022-10-09-hiking/"},{"categories":["生活"],"content":"牛木线徒步记 今年国庆，参加了朋友的婚礼。 热闹了一次，半深度参与了一下，前后也挺累的。 假期没有外出，找了一天去徒步锻炼一下，今年来总体锻炼得少，身体是最重要的本钱，这个根本时刻牢记。 找了个就近的徒步线路，火凤线和牛木线，距离现在住的地方不算远，出行方便。 本来打算走火凤线的，出门的时候换成了牛木线，打卡记录一下，看介绍也是广州经典的一条徒步路线。 我是前年才开始知道徒步这东西，在广州呆了那么多年，了解到的爬山都是走修筑好的栈道，轻松异常，然后前年走了一趟六片山，都是未修筑的土路，翻山越岭，陡坡怪石，想来和我小时候在村里翻山下水很像，上山小路，土路乱石，陡壁飞峭，有些意思。后来才知道，这种爬上在广州这种城市里叫徒步运动。 然后就喜欢上了，石阶栈道，走起来平平无奇，少了点意思。徒步爬山，走原生态的土路，爬坡穿林，越是陡峭越是刺激来劲。 关于徒步路线，我找到了一个APP，两步路，户外爬山徒步神器。在普通地图APP上是没有徒步山路土路的路线信息的，甚至是一些已修筑的栈道都没有标识。这对于徒步爬山的人很不友好，容易迷路走错路，不知身在何处。而两步路这里强吹一下，简直是徒步神器，非常好用。 第一：在户外山上手机信号差的情况下，它依然能基于gps提供较为精确的定位。 第二：它提供徒步轨迹功能，你走过的路都能生成轨迹线路，路上拍照标注点，向官方提交线路，可以导航荒山野路。可以将别人的路线加载到你正在走的地图上，你跟着前人的路线走即可。 第三：它可以提供配速，路程距离，海拔高度等信息。 第四：发起组队约伴活动。 它还有很多其他功能有待探索，目前官方的版本广告特别多，我这里提供一个无广告的精简版本，放在软件分享的公众号：工具客栈，大家如有需要，公众号聊天窗口回复：042，即可获取。 我在两步路上找了一个牛木线的线路，加载到自己地图上，然后全程验。开启了旅程。 线路 出发点：黄陂地铁D口 原结束点：长平地铁口 实际结束点：黄麻村口公交站 因为后面小半程没按原有线路走了，走了大路从黄麻村口出来做公交，所以结束点变动。 公园 黄陂地铁口到上山途中，途经的是一个公园绿道，风景非常好，公园刚好是商品房片区和城中村的分界线。绿道干净，溪水淙淙，草木青葱，鲜花点点，非常舒适，适合跑步运动。沿路走到峰湖御镜联排别墅区后，有一小段上坡，坡上是一个黄氏祖祠，上山是祖祠前面一点的白马农庄那里穿过农庄后上山，入口颇为隐蔽，因为要横穿农庄的内里，然后才能看到上山的土路。 穿过白马农庄 上山后，一派阴凉。树木高大，枝繁叶茂，遮阳效果非常好。其实徒步山野，除了走大路，基本都是不怎么晒的。就在广州徒步的山林，这里沿途大都是同一种树木，直直向上指天，在二十米高的天空中伸展枝叶，抢占阳光。树下空旷，并无多少灌木生长，大概是缺少阳光。 上山路 这里上牛头山，一路都是上坡，还是挺陡峭，一程接一程，有树林，有石坡，海拔陡然上升，一路上天的感觉，颇为刺激，我越来越喜欢爬这种陡峭高耸的坡段，可是女朋友并不喜欢这种折磨人的路，在她走来这太累，也觉得太过危险。这段路一直到地图上接近牛头山隧道的地方，才接入修筑的水泥路，进入人工大道，开阔起来，路边的标牌提示是天鹿湖森林公园。 爬坡林，好汉林既视感 石坡 爬坡 广州全景 爬上大路 此后路途就顺畅平和了很多，基本已经没有再上坡，一路一直到一个小屋子的地方，才又拐进山路，这段山路好走，都是沿着峰顶的线路，当然，树木高耸，周边也都是山，你也看不到其他山下的风景，只能看到两边的陡坡。沿线到达一个拐点，因为这条山顶的沿线一路向前，也是一条路，我们刚开始走过头了，又折回拐点，拐点这里是下山，也是非常陡，这种陡路，下山走得非常难受，下山远比上山难，一个是容易打滑，一个脚在鞋里往前突，脚也很难受，小半程的下山路，花了挺长时间，若是换成上山，相同路径下时间应该快多了。下山更比上山难，古人诚不欺我。 广州长城 俯瞰群山 最后经过一片竹林，终于下到大路，竟然是一条乡间小径，路线就随着这条路改了，不再往木强水库那边过去了。沿路非常清净，路边有些民宿，种着花花草草，充满乡间田园风。在一个大民宿的草地上，我们看到有人在准备婚礼，现场摆满了白色的桌椅和一些饰品。民宿边还有一片水稻，正在结穗，风一吹来，我闻到了熟悉的水稻混合青草的味道，仿佛回到了小时候在田里务农的时候，农村出来的都知道小时候田间务农的辛苦，那可一点也不浪漫。我们走进去一看，一片都是清新的田园风格，路边种了各色花草，两个小屋子外观清新可人，内部还没装修，稻田里边还挂立着一个个的竹笼饰物，路边各色花草迎风摇曳，水池边有个大水车，刷了黄木色的油漆，看上去很新，静静的伫立着，没有运转。女朋友说这里应该是打造旅拍一体的民宿体验，给人婚礼摆拍之类，拍照的背景也都造好了。城市里浪漫的田园风，在农村里是被讨厌的劳苦的标志。城里人喜欢田园风光，农村人喜欢车水马龙。我们都总喜欢自己没有的东西。 下山 见到大路 民宿旁的花 池边的小屋子 稻田 一路出来，发现这条路两旁错落着洋楼屋社，这是一个村子，细细想来是片山谷之间的峡谷地带建立起来的。这里估计现在登山健身的游人也较多，路边有很多农家乐和农庄，有些露营的有些亲自游戏的，路边有条小溪，溪水清浅，有些大人小孩在溪里戏水，场面很温馨。整体来说这片区都很清静，没有了大城市的喧嚣。我仿佛好像置身于另一个世界，有一种在桂林阳朔的错觉。 小溪戏水 沿路一直到外面黄麻社区居委会公交站的岔路口，这里提醒一下，这条路一路出来有些公交站点，写的是30分钟发一趟车，实际一天就早晚两趟，晚17点后才有，所以站牌上写的根本不可信。我们到这里才看到路边热闹了起来，路边的摊贩多了起来，边上公园草地修筑得很温馨。原来这里是长岭步道的主入口，长岭步道是一个大工程，方圆了路线长度近百公里，有很多栈道还未修好，是土山路，我们徒步的线路应该算是在里面的一部分。此时已经颇累我们休息了一阵。再往外再走2公里多才到黄麻村口公交站，这个站点才有公交往天河方向。 黄麻村小学墙 我们最后追着赶上了难得的一趟公交，结束了这趟徒步之旅，身心疲惫，浑身无力。 ","date":"2022-10-09","objectID":"/posts/2022-10-09-hiking/:1:0","tags":["锻炼"],"title":"徒步牛木线","uri":"/posts/2022-10-09-hiking/"},{"categories":["编程语言"],"content":"js月份和日期字段前补0的一种简单实现方法","date":"2022-10-08","objectID":"/posts/2022-10-08-js-date-add/","tags":["JavaScript"],"title":"js月份和日期前补0的一种简单实现方法","uri":"/posts/2022-10-08-js-date-add/"},{"categories":["编程语言"],"content":"问题 我的博客创建是通过借助obisidian的插件和脚本来生成，创建名称是年月日加时间，国庆期间进行文件名统一重新管理，按【年月日+标题】来命名。 js脚本月日字段生成默认是没有补0的，也就是如果1位的话显示是这样的1月1号：1-1，而不是01-01，这样整体就不统一。 ","date":"2022-10-08","objectID":"/posts/2022-10-08-js-date-add/:1:0","tags":["JavaScript"],"title":"js月份和日期前补0的一种简单实现方法","uri":"/posts/2022-10-08-js-date-add/"},{"categories":["编程语言"],"content":"js日期字段 查了一下资料，找到了一种简单的解决方法。 ES2017 引入了字符串补全长度的功能。如果某个字符串不够指定长度，会在头部或尾部补全。padStart()用于头部补全，padEnd()用于尾部补全。 //用法 var month = (d.getMonth() + 1).toString().padStart(2, '0'); //需要tosting转换；指头部需要俩位数，没有俩位数就补一个0 //调整后 var month = (d.getMonth() + 1).toString().padStart(2, '0'); var day = (d.getDate()).toString().padStart(2, '0'); ","date":"2022-10-08","objectID":"/posts/2022-10-08-js-date-add/:2:0","tags":["JavaScript"],"title":"js月份和日期前补0的一种简单实现方法","uri":"/posts/2022-10-08-js-date-add/"},{"categories":["编程语言"],"content":"参考 https://blog.csdn.net/xiaokangna/article/details/122297412 ","date":"2022-10-08","objectID":"/posts/2022-10-08-js-date-add/:3:0","tags":["JavaScript"],"title":"js月份和日期前补0的一种简单实现方法","uri":"/posts/2022-10-08-js-date-add/"},{"categories":["静态博客"],"content":"使用statcount提供的免费服务做静态网站全平台访问统计","date":"2022-10-05","objectID":"/posts/2022-10-05-take-statcount-for-site-statistics/","tags":["hugo","访问统计"],"title":"使用statcount做静态网站全平台访问统计","uri":"/posts/2022-10-05-take-statcount-for-site-statistics/"},{"categories":["静态博客"],"content":"前言 hugo静态博客搭建后，我用的是FixIt主题，网站的访问统计采用不蒜子的统计方案，可以在底部开启访客数量和页面访问量，使用很方便。 但是存在三个问题： 不蒜子时好时坏，经常间歇性不正常。尤其在文章页面访问量显示。 无法查看所有访问统计明细，每天每月的访问量等。 基于github pages多平台部署的站点访问量是分开统计的，不能合并显示。 对于第一个问题，我直接换用评论系统valine的访问量统计。 对于第二三个问题，我在武大路飞的博客里找到了解决方案，使用statcounter做访问量统计，经过一番讨教和研究，实现了这个方案，解决了这两个问题。 ","date":"2022-10-05","objectID":"/posts/2022-10-05-take-statcount-for-site-statistics/:1:0","tags":["hugo","访问统计"],"title":"使用statcount做静态网站全平台访问统计","uri":"/posts/2022-10-05-take-statcount-for-site-statistics/"},{"categories":["静态博客"],"content":"statcounter StatCounter是美国的一家著名网站流量统计服务商，其提供的免费版网站流量统计和收费版功能一样强大，只是限制每月统计页面访问量不超过100,000、日志尺寸不超过500，因此它采用免费网站流量统计服务仅适合访问量不大的网站，对于个人站点完全足够。你可StatCounter还可以当做计数器使用，你也可以隐藏统计图标，可以查看各种类型的访问报告，包括年月日访问量，访客ip国别等等。并且对于我基于github pages页面多平台部署的站点访问量是累计的，这点非常符合我的需求。 ","date":"2022-10-05","objectID":"/posts/2022-10-05-take-statcount-for-site-statistics/:2:0","tags":["hugo","访问统计"],"title":"使用statcount做静态网站全平台访问统计","uri":"/posts/2022-10-05-take-statcount-for-site-statistics/"},{"categories":["静态博客"],"content":"配置统计 statcounter官网：https://statcounter.com/ 配置过程是比较简单的，本质是将statcounter提供的代码添加到你网站的所有页面中即可，但是有些坑要注意。 ","date":"2022-10-05","objectID":"/posts/2022-10-05-take-statcount-for-site-statistics/:3:0","tags":["hugo","访问统计"],"title":"使用statcount做静态网站全平台访问统计","uri":"/posts/2022-10-05-take-statcount-for-site-statistics/"},{"categories":["静态博客"],"content":"注册获取验证代码 statcounter注册账号 去官网注册账号，无需绑定信用卡等支付信息。 添加项目，选择免费套餐，输入你网站地址，项目名称，选择电子邮件报告频次，设置时区Time Zone为上海，设置Counter/Button统计数据为是否可见。这里要注意： Counter/Button统计数据即你设置在网站页面是否显示，none为隐藏，我们可见要设置为【可见的计数器】，我就是因为前面这里没设好，默认是none隐藏，页面不显示访问数字，当时找了好久的原因，这个坑要规避。计数器可自定义显示样式和logo以及是否开启超链接，根据个人喜好去配置。 平台选择默认，继续，复制验证代码到你的静态网站，所有页面添加（找个模板页即可）。然后回到statcounter进行验证，验证通过即完成。 注意 在配置里，修改统计显示样式后，验证代码会更新重新生成，需要重新填写验证代码到发布站点里。 ","date":"2022-10-05","objectID":"/posts/2022-10-05-take-statcount-for-site-statistics/:3:1","tags":["hugo","访问统计"],"title":"使用statcount做静态网站全平台访问统计","uri":"/posts/2022-10-05-take-statcount-for-site-statistics/"},{"categories":["静态博客"],"content":"站点填写验证代码 我用hugo博客FixIt主题，验证代码直接添加在config.toml里的页面底部信息位置，参看以下自定义内容。这里注意，toml配置里，html验证代码段要用\"““圈起来，你可以调整要显示文字信息。 # 页面底部信息配置 [params.footer] enable = true # 自定义内容（支持 HTML 格式） custom = \"\"\" \u003c!-- Default Statcounter code for blog https://zhjin.eu.org/ --\u003e \u003ca href=\"https://statcounter.com/p12800592/?guest=1\" target=\"_blank\"\u003e全平台总访问统计\u003c/a\u003e \u003cscript type=\"text/javascript\"\u003e var sc_project=xxx; var sc_invisible=0; var sc_security=\"xxx\"; var scJsHost = \"https://\"; document.write(\"\u003csc\"+\"ript type='text/javascript' src='\" + scJsHost+ \"statcounter.com/counter/counter.js'\u003e\u003c/\"+\"script\u003e\"); \u003c/script\u003e \u003cnoscript\u003e\u003cdiv class=\"statcounter\"\u003e\u003ca title=\"web stats\" href=\"https://statcounter.com/\" target=\"_blank\"\u003e\u003cimg referrerPolicy=\"no-referrer-when-downgrade\"\u003e\u003c/a\u003e\u003c/div\u003e\u003c/noscript\u003e \u003c!-- End of Statcounter Code --\u003e \"\"\" ","date":"2022-10-05","objectID":"/posts/2022-10-05-take-statcount-for-site-statistics/:3:2","tags":["hugo","访问统计"],"title":"使用statcount做静态网站全平台访问统计","uri":"/posts/2022-10-05-take-statcount-for-site-statistics/"},{"categories":["静态博客"],"content":"查看效果 验证代码填写并回到statcounter验证生效后，回到你个人网站，即可看到效果。 我这个博客是通过上传github，触发github action自动部署到github pages，其余cloudflare，render，vercel，netlify都是从github pages同步过去，因此站点都是同一份页面，托管于不同平台，statcounter的统计是叠加的。 ","date":"2022-10-05","objectID":"/posts/2022-10-05-take-statcount-for-site-statistics/:4:0","tags":["hugo","访问统计"],"title":"使用statcount做静态网站全平台访问统计","uri":"/posts/2022-10-05-take-statcount-for-site-statistics/"},{"categories":["静态博客"],"content":"其他 statcounter管理端还有许多功能，页面访问统计显示你可以设置显示访客数或是访问量，查看各类统计报告等。 ","date":"2022-10-05","objectID":"/posts/2022-10-05-take-statcount-for-site-statistics/:5:0","tags":["hugo","访问统计"],"title":"使用statcount做静态网站全平台访问统计","uri":"/posts/2022-10-05-take-statcount-for-site-statistics/"},{"categories":["静态博客"],"content":"参考 https://whuwangyong.github.io/2022-09-29-use-statcounter-to-get-access-statistics/ ","date":"2022-10-05","objectID":"/posts/2022-10-05-take-statcount-for-site-statistics/:6:0","tags":["hugo","访问统计"],"title":"使用statcount做静态网站全平台访问统计","uri":"/posts/2022-10-05-take-statcount-for-site-statistics/"},{"categories":["脚本"],"content":"解决shell中read在控制台不能删除内容的方法","date":"2022-10-05","objectID":"/posts/2022-10-05-shell-read-config/","tags":["shell"],"title":"shell中read在控制台不能删除内容的解决方式","uri":"/posts/2022-10-05-shell-read-config/"},{"categories":["脚本"],"content":"问题 因为静态博客创建，上传提交需要进行多个git命令，操作起来比较麻烦，于是沿用主题开发者的shell脚本命令，将多个命令直接通过一个脚本封装，双击一键运行即可，非常方便。 但是，在使用时遇到一个问题：运行上传脚本时，输入commit信息，输错了 backspace 删除键无法全部删除，只删除一个字符，然后就无法删除了。 #!/bin/bash cd .. git add . read -p \"Please enter commit message: \" commitMsg if [ -z $commitMsg ];then commitMsg=\"Docs: Kingpo update $(date +'%F %a %T')\" fi git commit -m \"✏ $commitMsg\" git push 网上查了一下，问题应该出在read命令这里。 ","date":"2022-10-05","objectID":"/posts/2022-10-05-shell-read-config/:1:0","tags":["shell"],"title":"shell中read在控制台不能删除内容的解决方式","uri":"/posts/2022-10-05-shell-read-config/"},{"categories":["脚本"],"content":"read命令 Shell中内置read命令，功能是读取从键盘输入的数据。 read命令用法 read [-options] [variables] options表示选项，如下表所示；variables表示用来存储数据的变量，可以有一个，也可以有多个。 Shell read 命令支持的选项 选项 说明 -a array 把读取的数据赋值给数组 array，从下标 0 开始。 -d delimiter 用字符串 delimiter 指定读取结束的位置，而不是一个换行符（读取到的数据不包括 delimiter）。 -e 在获取用户输入的时候，对功能键进行编码转换，不会直接显式功能键对应的字符。 -n num 读取 num 个字符，而不是整行字符。 -p prompt 显示提示信息，提示内容为 prompt。 -r 原样读取（Raw mode），不把反斜杠字符解释为转义字符。 -s 静默模式（Silent mode），不会在屏幕上显示输入的字符。当输入密码和其它确认信息的时候，这是很有必要的。 -t seconds 设置超时时间，单位为秒。如果用户没有在指定时间内输入完成，那么 read 将会返回一个非 0 的退出状态，表示读取失败。 -u fd 使用文件描述符 fd 作为输入源，而不是标准输入，类似于重定向。 ","date":"2022-10-05","objectID":"/posts/2022-10-05-shell-read-config/:2:0","tags":["shell"],"title":"shell中read在控制台不能删除内容的解决方式","uri":"/posts/2022-10-05-shell-read-config/"},{"categories":["脚本"],"content":"问题解决 我是在windows系统上，运行.sh脚本遇到这个问题，这里应该是read在获取用户输入的时候，第一次进行了编码转换，第二次就不转换了，直接将功能键对应显式成其字符。致使在输入删除功能键时只能删除一位。 相同的问题会出现在你按这些功能键backspace键、↑、↓、←、→、F1、F2、F3、F4 输入后显示结果如下： ^H^H^H^[[A^[[B^[[D^[[C^[OP^[OQ^[OR^[OS 解决方式： 运用 -e 参数解决。 直接在p前加e即可。 read -ep 我这里修改后的脚本如下： #!/bin/bash cd .. git add . read -ep \"Please enter commit message: \" commitMsg if [ -z $commitMsg ];then commitMsg=\"Docs: Kingpo update $(date +'%F %a %T')\" fi git commit -m \"✏ $commitMsg\" git push 现在功能键就完全正常，删除键执行的删除的功能。 ","date":"2022-10-05","objectID":"/posts/2022-10-05-shell-read-config/:3:0","tags":["shell"],"title":"shell中read在控制台不能删除内容的解决方式","uri":"/posts/2022-10-05-shell-read-config/"},{"categories":["脚本"],"content":"参考 https://blog.csdn.net/lcm_linux/article/details/102899524 http://c.biancheng.net/view/2991.html ","date":"2022-10-05","objectID":"/posts/2022-10-05-shell-read-config/:4:0","tags":["shell"],"title":"shell中read在控制台不能删除内容的解决方式","uri":"/posts/2022-10-05-shell-read-config/"},{"categories":["静态博客"],"content":"前言 博客赞赏，虽说打赏的人不一定会有很多，但这个功能不能少，赞赏是一种美德，有余力而为之。多数主题不自带赞赏功能，这篇文章的这套打赏支持方案，基于LoveIt，LeaveIt，FixIt这系列主题，他们本质都是由同一个主题演变迭代。其余博客主题可以自行尝试，区别不大，只要把主题中修改的模板直接改到hugo的模板里即可。 特别提示 赞赏功能需要用到.scss样式，hugo版本需要使用扩展版hugo_extended才能支持。大家编译时要选用对应系统的扩展版本。 ","date":"2022-10-04","objectID":"/posts/2022-10-04-added-reward-function/:1:0","tags":["hugo"],"title":"hugo博客增加赞赏功能，基于LoveIt/LeaveIt/FixIt主题","uri":"/posts/2022-10-04-added-reward-function/"},{"categories":["静态博客"],"content":"配置赞赏开关 ","date":"2022-10-04","objectID":"/posts/2022-10-04-added-reward-function/:2:0","tags":["hugo"],"title":"hugo博客增加赞赏功能，基于LoveIt/LeaveIt/FixIt主题","uri":"/posts/2022-10-04-added-reward-function/"},{"categories":["静态博客"],"content":"全局配置 在 config.toml 配置文件中修改中文预演代码为小写的 zh-cn，如下： defaultContentLanguage = \"zh-cn\" 在 config.toml 添加以下变量。这里配置的全局生效，即所有文章都会生效。 [params.reward] # 文章打赏 enable = true # true为开启 flase为关闭 wechat = \"/images/wechat.png\" # 微信二维码文件路径 alipay = \"/images/alipay.png\" # 支付宝二维码文件路径 ","date":"2022-10-04","objectID":"/posts/2022-10-04-added-reward-function/:2:1","tags":["hugo"],"title":"hugo博客增加赞赏功能，基于LoveIt/LeaveIt/FixIt主题","uri":"/posts/2022-10-04-added-reward-function/"},{"categories":["静态博客"],"content":"单篇文章配置 也可对单篇文章单独配置，在文章的开头参数添加变量配置。 全局配置和单篇文章配置都设置的情况下，优先以文章的配置为生效依据。 reward: false # true为开启 flase为关闭 ","date":"2022-10-04","objectID":"/posts/2022-10-04-added-reward-function/:2:2","tags":["hugo"],"title":"hugo博客增加赞赏功能，基于LoveIt/LeaveIt/FixIt主题","uri":"/posts/2022-10-04-added-reward-function/"},{"categories":["静态博客"],"content":"修改主题中的文件 ","date":"2022-10-04","objectID":"/posts/2022-10-04-added-reward-function/:3:0","tags":["hugo"],"title":"hugo博客增加赞赏功能，基于LoveIt/LeaveIt/FixIt主题","uri":"/posts/2022-10-04-added-reward-function/"},{"categories":["静态博客"],"content":"1.修改国际化文件 在 \\themes\\FixIt\\i18n\\zh-CN.toml 配置文件中添加如下配置： [reward] other = \"赞赏支持\" #other中的文字可以自由更改 [rewardAlipay] other = \"支付宝打赏\" [rewardWechat] other = \"微信打赏\" ","date":"2022-10-04","objectID":"/posts/2022-10-04-added-reward-function/:3:1","tags":["hugo"],"title":"hugo博客增加赞赏功能，基于LoveIt/LeaveIt/FixIt主题","uri":"/posts/2022-10-04-added-reward-function/"},{"categories":["静态博客"],"content":"2.添加页面模板文件 在 \\themes\\FixIt\\layouts\\partials\\single\\ 中新建 reward.html html内容如下： {{ if or .Params.reward (and .Site.Params.reward.enable (ne .Params.reward false)) -}} \u003cdiv class=\"post-reward\"\u003e \u003cinput type=\"checkbox\" name=\"reward\" id=\"reward\" hidden/\u003e \u003clabel class=\"reward-button\" for=\"reward\"\u003e{{ T \"reward\" }}\u003c/label\u003e \u003cdiv class=\"qr-code\"\u003e {{ $qrCode := .Site.Params.reward }} {{- $cdnPrefix := .Site.Params.cdnPrefix -}} {{ with $qrCode.wechat -}} \u003clabel class=\"qr-code-image\" for=\"reward\"\u003e \u003cimg class=\"image\" src=\"{{ $cdnPrefix }}{{ . }}\"\u003e \u003cspan\u003e{{ T \"rewardWechat\" }}\u003c/span\u003e \u003c/label\u003e {{- end }} {{ with $qrCode.alipay -}} \u003clabel class=\"qr-code-image\" for=\"reward\"\u003e \u003cimg class=\"image\" src=\"{{ $cdnPrefix }}{{ . }}\"\u003e \u003cspan\u003e{{ T \"rewardAlipay\" }}\u003c/span\u003e \u003c/label\u003e {{- end }} \u003c/div\u003e \u003c/div\u003e {{- end }} ","date":"2022-10-04","objectID":"/posts/2022-10-04-added-reward-function/:3:2","tags":["hugo"],"title":"hugo博客增加赞赏功能，基于LoveIt/LeaveIt/FixIt主题","uri":"/posts/2022-10-04-added-reward-function/"},{"categories":["静态博客"],"content":"3.修改文章模板文件 修改 /themes/FixIt/layouts/posts/single.html 找到 {{- /* Content */ -}}，由于不同版本这里模块内容比较多，避免混淆，这里小技巧，找到 {{- /* Content */ -}}模块里的 \u003c/div\u003e标签，在其前添加下面代码： {{- /* Reward */ -}} {{- partial \"single/reward.html\" . -}} 修改后如下【（# 添加打赏模块）字眼需删除】： {{- /* Content */ -}} {{- $content := dict \"Content\" .Content \"Ruby\" $params.ruby \"Fraction\" $params.fraction \"Fontawesome\" $params.fontawesome | partial \"function/content.html\" | safeHTML -}} {{- if $params.password -}} {{- $saltLen := strings.RuneCount (trim $params.password \"\") -}} {{- $saltLen = cond (eq (mod $saltLen 2) 0) (add $saltLen 1) $saltLen -}} {{- $base64EncodeContent := $content | base64Encode -}} {{- $content = printf \"%v%v%v\" (substr $base64EncodeContent 0 $saltLen) (substr (sha256 $params.password) $saltLen) (substr $base64EncodeContent $saltLen) -}} {{- end -}} \u003cdiv class=\"content\" id=\"content\" {{ with $params.password }}data-password=\"{{ md5 $params.password }}\" {{ end }} {{ with $params.password }}data-content=\"{{ $content }}\" {{ end }}\u003e {{- if not $params.password -}} {{- /* Expiration Reminder */ -}} {{- partial \"single/expiration-reminder.html\" . -}} {{- $content -}} {{- else -}} {{- partial \"single/fixit-decryptor.html\" . -}} {{- end -}} {{- /* promote */ -}} {{- partial \"single/promote.html\" . -}} {{- /* Reward */ -}} #添加打赏模块 {{- partial \"single/reward.html\" . -}} #添加打赏模块 \u003c/div\u003e ","date":"2022-10-04","objectID":"/posts/2022-10-04-added-reward-function/:3:3","tags":["hugo"],"title":"hugo博客增加赞赏功能，基于LoveIt/LeaveIt/FixIt主题","uri":"/posts/2022-10-04-added-reward-function/"},{"categories":["静态博客"],"content":"4.增加css样式代码 在themes\\FixIt\\assets\\css\\_custom.scss中，添加以下样式代码： 以下代码实现效果是赞赏码自动折叠，点击【赞赏支持】按钮，展开二维码，如果你想让赞赏码直接展示而不是折叠，注释掉display: none这行，代码里已有说明。 /* 打赏 */ article .post-reward { margin-top: 20px; padding-top: 10px; text-align: center; border-top: 1px dashed #e6e6e6 } article .post-reward .reward-button { margin: 15px 0; padding: 3px 7px; display: inline-block; color: #c05b4d; border: 1px solid #c05b4d; border-radius: 5px; cursor: pointer } article .post-reward .reward-button:hover { color: #fefefe; background-color: #c05b4d; transition: .5s } article .post-reward #reward:checked~.qr-code { display: block } article .post-reward #reward:checked~.reward-button { display: none //如果要让赞赏码直接展示而不是折叠，这行直接注释掉 } article .post-reward .qr-code { display: none //如果要让赞赏码直接展示而不是折叠，这行直接注释掉 } article .post-reward .qr-code .qr-code-image { display: inline-block; min-width: 200px; width: 40%; margin-top: 15px } article .post-reward .qr-code .qr-code-image span { display: inline-block; width: 100%; margin: 8px 0 } article .post-reward .qr-code .image { width: 200px; height: 200px } 小提示 这里主题文件的修改，你可以完全拷贝一份复制到hugo站点框架里对应目录下，如果无此目录则直接新建，然后再做修改，这样不会影响主题里文件，避免你主题升级之类直接覆盖更新。hugo会优先从站点框架里调用模板文件，匹配不到再在主题模板文件里调用。 ","date":"2022-10-04","objectID":"/posts/2022-10-04-added-reward-function/:3:4","tags":["hugo"],"title":"hugo博客增加赞赏功能，基于LoveIt/LeaveIt/FixIt主题","uri":"/posts/2022-10-04-added-reward-function/"},{"categories":["静态博客"],"content":"测试查看效果 翻到文章文末，查看效果，我这里还添加了关注公众号的二维码，添加过程和赞赏模式一样的。 ","date":"2022-10-04","objectID":"/posts/2022-10-04-added-reward-function/:4:0","tags":["hugo"],"title":"hugo博客增加赞赏功能，基于LoveIt/LeaveIt/FixIt主题","uri":"/posts/2022-10-04-added-reward-function/"},{"categories":["静态博客"],"content":"参考资料 https://cywhat.cn/Loveit%E4%B8%BB%E9%A2%98%E5%BC%80%E5%90%AF%E6%96%87%E7%AB%A0%E8%B5%9E%E8%B5%8F/#%E6%B7%BB%E5%8A%A0%E6%96%87%E7%AB%A0%E6%89%93%E8%B5%8F%E5%8A%9F%E8%83%BD http://imfang.net/web/119.html ","date":"2022-10-04","objectID":"/posts/2022-10-04-added-reward-function/:5:0","tags":["hugo"],"title":"hugo博客增加赞赏功能，基于LoveIt/LeaveIt/FixIt主题","uri":"/posts/2022-10-04-added-reward-function/"},{"categories":["静态博客"],"content":"GitHub pages提供域名可供使用，但是国内访问很慢，通过cloudflare域名解析配置自定义域名，可以利用其cdn加速访问。","date":"2022-09-28","objectID":"/posts/2022-09-28-github-pages-custom-domain-name/","tags":["GitHub"],"title":"GitHub pages配置自定义域名利用Cloudflare全球CDN","uri":"/posts/2022-09-28-github-pages-custom-domain-name/"},{"categories":["静态博客"],"content":"关于GitHub pages GitHub pages是github提供免费静态站点托管服务，并提供域名xxx.github.io，xxx是你GitHub账户的名称。一个账户只能托管一个GitHub pages项目。 官方文档介绍如下： GitHub Pages 是一项静态站点托管服务，它直接从 GitHub 上的仓库获取 HTML、CSS 和 JavaScript 文件，（可选）通过构建过程运行文件，然后发布网站。 可以在 GitHub Pages 示例集合中看到 GitHub Pages 站点的示例。 你可以在 GitHub 的 github.io 域或自己的自定义域上托管站点。 有关详细信息，请参阅“将自定义域与 GitHub Pages 配合使用”。 ","date":"2022-09-28","objectID":"/posts/2022-09-28-github-pages-custom-domain-name/:1:0","tags":["GitHub"],"title":"GitHub pages配置自定义域名利用Cloudflare全球CDN","uri":"/posts/2022-09-28-github-pages-custom-domain-name/"},{"categories":["静态博客"],"content":"关于Cloudflare Cloudflare（Cloudflare, Inc.）是一家总部位于旧金山的美国跨国科技企业，以向客户提供基于反向代理的内容分发网络（Content Delivery Network, CDN）及分布式域名解析服务（Distributed Domain Name Server）为主要业务。 我们主要用到他两个服务： 域名服务器 任一传播网络的免费域名服务器（DNS）。根据W3Cook，Cloudflare的DNS服务目前所服务的对象超过受管理DNS网域的35%。SolveDNS发现Cloudflare能持续提供全球数一数二的 DNS 查阅速度，在2016年4月回报的查阅速度为8.66毫秒。[23] 内容分发网络(CDN) Cloudflare的网络在全球拥有许多连线到互联网交换点的连线。Cloudflare会将内容缓存到其边缘位置，以扮演内容提供网络（CDN）的角色，所有要求接着会透过Cloudflare进行反向Proxy处理，并直接从Cloudflare提供缓存的内容。 Cloudflare推出了中国大陆地区的服务，帮助所有企业改善他们的互联网应用的性能及安全并扩展其全球业务。Cloudflare最初以百度为合作伙伴，但之后转而与京东云合作。Cloudflare和京东云的合作节点预计将在2023年扩展到中国大陆的150个地点。 ","date":"2022-09-28","objectID":"/posts/2022-09-28-github-pages-custom-domain-name/:2:0","tags":["GitHub"],"title":"GitHub pages配置自定义域名利用Cloudflare全球CDN","uri":"/posts/2022-09-28-github-pages-custom-domain-name/"},{"categories":["静态博客"],"content":"准备工作 一个GitHub pages站点。 一个自己的域名，并交由cloudflare提供域名解析服务。 个人域名可以购买国内外域名服务商的域名，区别是国内的域名的需要备案，国外不用。 免费的域名注册，目前据我收集到的市面有两个渠道，一个freenom，一个eu.org。 freenom可以注册.tk、.ml、.ga、.cf、.gq这些免费顶级域名，有效期1年，一年到期前一周可续，否则会被回收。 eu.org 是欧盟推出的免费域名服务，从1996年至今，虽是二级域名，但完全可以当一级域名使用，永久免费。我回头再整理一个教程。 ","date":"2022-09-28","objectID":"/posts/2022-09-28-github-pages-custom-domain-name/:3:0","tags":["GitHub"],"title":"GitHub pages配置自定义域名利用Cloudflare全球CDN","uri":"/posts/2022-09-28-github-pages-custom-domain-name/"},{"categories":["静态博客"],"content":"自定义域名配置 ","date":"2022-09-28","objectID":"/posts/2022-09-28-github-pages-custom-domain-name/:4:0","tags":["GitHub"],"title":"GitHub pages配置自定义域名利用Cloudflare全球CDN","uri":"/posts/2022-09-28-github-pages-custom-domain-name/"},{"categories":["静态博客"],"content":"DNS解析配置 ping自己的github pages域名xxx.github.io，可查看它的ip，当前github io服务器为以下4个，ip在四个里随机变化。 185.199.108.153 185.199.109.153 185.199.110.153 185.199.111.153 进到cloudflare管理平台，域名管理添加一条www的CNAME记录，指向你自己的github.io域名xxx.github.io。这一步可以将你的个人域名转向xxx.github.io，io域名再去解析到那4个ip中的一个。 或者直接添加4条A记录，将你跟域名直接指向上面4个ip。这步使你个人域名直接转向github.io的ip。 github官方的建议是采用添加CNAME记录，这样github.io的ip变化后不会不会受影响。 ","date":"2022-09-28","objectID":"/posts/2022-09-28-github-pages-custom-domain-name/:4:1","tags":["GitHub"],"title":"GitHub pages配置自定义域名利用Cloudflare全球CDN","uri":"/posts/2022-09-28-github-pages-custom-domain-name/"},{"categories":["静态博客"],"content":"github配置 在你github pages项目根目录，添加一个文件名为CNAME文件（注意文件不要有后缀）， 文件里输入你DNS配置的个人域名。即可完成。 你也可以直接进到个人GitHub pages那个项目，GitHub pages -\u003e setting设置，custom domain里添加保存你个人域名。这个操作实际对应也是生成1步骤的CNAME文件。效果一样的。 注意： 如果你github pages静态网站是通过github action自动编译生成的话，需要在编译前的项目对应的生成pages的根目录里添加这个CNAME文件，因为每次编译生成都会清空你原GitHub pages项内容，主流静态博客（hugo，hexo等）的话基本是static目录，这个目录的文件编译后全部都在生成的静态网站根目录里。 通过以上配置，等域名配置生效后，一般需要24小时，不过我设置后一会就直接生效，即可通过个人域名访问，cloudflare配置域名默认启用cdn代理，速度会比直接访问github.io快很多。 我们可以ping一下配置后个人域名的地址，会发现已经不是github.io的那4个了，而是cloudflare的cdn代理服务器。 关于无法Enforce HTTPS 配置到这里，大家会发现无法启用github的强制https，这是因为cloudflare默认启用了http/dns代理功能，也就是cdn代理，导致github无法查看生成https证书所需的dns记录，对于指向github的任何dns记录，都要禁用该选项，才能启用Enforce HTTPS。 不过你在的cloudflare上直接启用https即可，这里本来就要利用它的cdn来进行访问加速。 ","date":"2022-09-28","objectID":"/posts/2022-09-28-github-pages-custom-domain-name/:4:2","tags":["GitHub"],"title":"GitHub pages配置自定义域名利用Cloudflare全球CDN","uri":"/posts/2022-09-28-github-pages-custom-domain-name/"},{"categories":["静态博客"],"content":"参考资料： github docs https://docs.github.com/cn/pages/getting-started-with-github-pages/about-github-pages Cloudflare https://zh.wikipedia.org/wiki/Cloudflare GitHub Pages自定义域名使用Cloudflare无法Enforce HTTPS解决方法 https://blog.imfang.net/web/118.html ","date":"2022-09-28","objectID":"/posts/2022-09-28-github-pages-custom-domain-name/:5:0","tags":["GitHub"],"title":"GitHub pages配置自定义域名利用Cloudflare全球CDN","uri":"/posts/2022-09-28-github-pages-custom-domain-name/"},{"categories":["短网址"],"content":"短链接 短链接又称短网址、短码，意思就是形式上比较短的网址。短链接服务，可以通过将一个普通的冗长的网址缩短生成一个新的较短的网址，便于分享传播。 短链接主要应用场景如下： 短信发送 短信里用短链接，可以极大减少字符，现在很多营销短信都是用的短网址。 社群推广 很多社区或社交网站，会屏蔽长链接。微博字数限制，公众号关键字链接限制等，短网址可以缩短字符，规避掉这些限制。 微信防屏蔽 微信里有各种屏蔽，用短链接可以避免暴露原有地址关键字，规避屏蔽。 活码 短网址是固定的，可以通过修改原链接达到变更地址的作用，此时不用去修改固定的短网址，短网址就相当于一个中间层。主要用于替换更换链接成本较高的地方，比如生成好的二维码等。 PS：短链接服务一定要用大厂，一般不至于跑路，稳定性有所保证。 ","date":"2022-09-21","objectID":"/posts/2022-09-21-personal-short-chain-services/:1:0","tags":["短网址","cloudflare"],"title":"用cloudflare搭建免费的个人短链接平台","uri":"/posts/2022-09-21-personal-short-chain-services/"},{"categories":["短网址"],"content":"自建短链接平台 这里利用cloudflare workers提供的服务，免费版本每日100000次请求，对个人使用而言完全足够。 脚本配置基于GitHub开源项目AoEiuV020/Url-Shorten-Worker 你需要什么： 已注册cloudflare账号 自己的域名，越短越好，由cloudflare作解析。 操作流程： Workers KV中创建一个命名空间，名称随意，比如link。 Workers创建新服务，服务名称随意，启动器选择http路由器。 进入Workers服务，设置=》变量=》KV命名空间绑定，变量名称大写LINKS，值就是那个命名空间名；环境变量里再添加系列变量。变量说明如下： 调整超时设置 演示模式生成的短链接超时无法访问， 白名单或者密码正确情况超时设置无效， 修改脚本开头的变量shorten_timeout, 单位毫秒，0表示不设置超时 调整白名单 白名单中的域名设置短链接无视超时， 修改脚本开头的变量white_list, 是个json数组，写顶级域名就可以，自动通过顶级域名和所有二级域名 关闭演示模式 只有演示模式开启才允许访客无密码添加非白名单地址，超时短链接会失效， 修改脚本开头的变量demo_mode，为true开启演示，为false无密码且非白名单请求不受理 自动删除演示记录 针对演示模式开启情况下的超时失效的短链接记录是否自动删除， 修改脚本开头的变量remove_completely，为true自动删除超时的演示短链接记录，否则仅是标记过期，以便在后台查询历史记录 修改密码 网页有个隐藏输入框可以输入密码， 密码正确情况无视白名单和超时设置，且支持自定义短链接， 修改脚本开头的变量password，这个私密信息比较建议直接在环境变量里配置 修改短链长度 短链长度就是随机生成的key也就是短链接的path部分的长度， 长度不够时容易出现重复，遇到重复时会自动延长， 修改脚本开头的变量default_len 注意：key均为对应大写 回到【资源】，快速编辑，复制项目中的index.js的代码，即以下代码内容，保存并编译。 //index.js源代码 // 项目名，决定html从哪个项目获取， const github_repo = typeof(GITHUB_REPO)!=\"undefined\" ? GITHUB_REPO : 'charlie-king/Url-Shorten-Worker' // 项目版本，cdn会有缓存，所以有更新时需要指定版本， const github_version = typeof(GITHUB_VERSION)!=\"undefined\" ? GITHUB_VERSION : '@main' // 密码，密码正确情况无视白名单和超时设置，且支持自定义短链接， const password = typeof(PASSWORD)!=\"undefined\" ? PASSWORD : 'AoEiuV020 yes' // 短链超时，单位毫秒，支持整数乘法，0表示不设置超时， const shorten_timeout = typeof(SHORTEN_TIMEOUT)!=\"undefined\" ? SHORTEN_TIMEOUT.split(\"*\").reduce((a,b)=\u003eparseInt(a)*parseInt(b),1) : (1000 * 60 * 10) // 默认短链key的长度，遇到重复时会自动延长， const default_len = typeof(DEFAULT_LEN)!=\"undefined\" ? parseInt(DEFAULT_LEN) : 6 // 为true开启演示，否则无密码且非白名单请求不受理，是则允许访客试用，超时后失效， const demo_mode = typeof(DEMO_MODE)!=\"undefined\" ? DEMO_MODE === 'true' : true // 为true自动删除超时的演示短链接记录，否则仅是标记过期，以便在后台查询历史记录， const remove_completely = typeof(REMOVE_COMPLETELY)!=\"undefined\" ? REMOVE_COMPLETELY === 'true' : true // 白名单中的域名无视超时，json数组格式，写顶级域名就可以，自动通过顶级域名和所有二级域名， const white_list = JSON.parse(typeof(WHITE_LIST)!=\"undefined\" ? WHITE_LIST : `[ \"aoeiuv020.com\", \"aoeiuv020.cn\", \"aoeiuv020.cc\", \"020.name\" ]`) // 演示模式开启时网页上展示这段禁止滥用提示，并不需要明确表示什么时候失效， const demo_notice = typeof(DEMO_NOTICE)!=\"undefined\" ? DEMO_NOTICE : `注意：为防止示例服务被人滥用，故所有由demo网站生成的链接随时可能失效，如需长期使用请自行搭建。` //console.log(`${github_repo}, ${github_version}, ${password}, ${shorten_timeout}, ${demo_mode}, ${white_list}, ${demo_notice}`) const html404 = `\u003c!DOCTYPE html\u003e \u003cbody\u003e \u003ch1\u003e404 Not Found.\u003c/h1\u003e \u003cp\u003eThe url you visit is not found.\u003c/p\u003e \u003c/body\u003e` async function randomString(len) { let $chars = 'ABCDEFGHJKMNPQRSTWXYZabcdefhijkmnprstwxyz2345678'; /****默认去掉了容易混淆的字符oOLl,9gq,Vv,Uu,I1****/ let maxPos = $chars.length; let result = ''; for (i = 0; i \u003c len; i++) { result += $chars.charAt(Math.floor(Math.random() * maxPos)); } return result; } async function checkURL(url){ let str=url; let Expression=/^http(s)?:\\/\\/(.*@)?([\\w-]+\\.)*[\\w-]+([_\\-.,~!*:#()\\w\\/?%\u0026=]*)?$/; let objExp=new RegExp(Expression); if(objExp.test(str)==true){ if (str[0] == 'h') return true; else return false; }else{ return false; } } // 检查域名是否在白名单中，参数只包含域名部分， async function checkWhite(host){ return white_list.some((h) =\u003e host == h || host.endsWith('.'+h)) } async function md5(message) { const msgUint8 = new TextEncoder().encode(message) // encode as (utf-8) Uint8Array const hashBuffer = await crypto.subtle.digest('MD5', msgUint8) // hash the message const hashArray = Array.from(new Uint8Array(hashBuffer)) // convert buffer to byte array const hashHex = hashArray.map(b =\u003e b.toString(16).padStart(2, '0')).join('') // convert bytes to hex string return hashHex } async function checkHash(url, hash) { if (!hash) { return false } return (await md5(url+password)) == hash } async function save_url(url, key, admin, len) { len = len || default_len; // 密码正确且指定了key的情况直接覆盖旧值， const override = admin \u0026\u0026 key if (!override) { // 密码不正确情况无视指定key, key = await randomString(len) } const is_exists = await load_url(key) console.log(\"key exists \" + key + \" \" + is_exists) if (override || !is_exists) { var mode = 3 if (admin) { mode = 0 } let value = `${mode};${Dat","date":"2022-09-21","objectID":"/posts/2022-09-21-personal-short-chain-services/:2:0","tags":["短网址","cloudflare"],"title":"用cloudflare搭建免费的个人短链接平台","uri":"/posts/2022-09-21-personal-short-chain-services/"},{"categories":["短网址"],"content":"参考 https://github.com/AoEiuV020/Url-Shorten-Worker ","date":"2022-09-21","objectID":"/posts/2022-09-21-personal-short-chain-services/:3:0","tags":["短网址","cloudflare"],"title":"用cloudflare搭建免费的个人短链接平台","uri":"/posts/2022-09-21-personal-short-chain-services/"},{"categories":["静态博客"],"content":"把个人博客或网站提交给百度，必应，谷歌，360搜索收录","date":"2022-09-16","objectID":"/posts/2022-09-16-submit-to-search-engine/","tags":["hugo","搜索"],"title":"个人博客或网站提交搜索引擎收录","uri":"/posts/2022-09-16-submit-to-search-engine/"},{"categories":["静态博客"],"content":"前言 个人博客或网站搭建好后，要想有更多的曝光量，最好是让各大搜索引擎收录，，这样就能直接在搜索引擎上搜索到你的博客或网站的内容，检测是否被收录的方式：site:你的网站域名，比如我的site:zhjin.eu.org。一般新网站，搜索引擎自动收录的时间是比较长的，有的甚至不会被收录。解决方式是我们自动提交我们的站点给搜索引擎，搜索引擎都有收录链接提交入口。 这里我们以百度，谷歌，必应和360为例。 ","date":"2022-09-16","objectID":"/posts/2022-09-16-submit-to-search-engine/:1:0","tags":["hugo","搜索"],"title":"个人博客或网站提交搜索引擎收录","uri":"/posts/2022-09-16-submit-to-search-engine/"},{"categories":["静态博客"],"content":"百度收录提交 百度提交入口：https://ziyuan.baidu.com/linksubmit/url 登录百度账号，输入站点提交，提交的站点需要验证，有三种方式可选。我的hugo博客主题里带有这个网站验证功能的，即这里的第二种模式的验证，不料设置后验证失败，最后我采取方式一。 上传对应文件到站点根目录 在首页标头加入百度这里提供的一段链接 根据提示设置dns的cname指向 网站验证后，建议在普通收录里，添加一下自己sitemaps，也就是你站点里的网站地图，所有页面链接集合，这样相当于提交全站的内容给到搜索引擎。比如我的hugo博客在编译后是有直接生成这个文件的，位于根目录，(https://zhjin.eu.org/sitemap.xml) ","date":"2022-09-16","objectID":"/posts/2022-09-16-submit-to-search-engine/:2:0","tags":["hugo","搜索"],"title":"个人博客或网站提交搜索引擎收录","uri":"/posts/2022-09-16-submit-to-search-engine/"},{"categories":["静态博客"],"content":"必应收录提交 bing提交入口：https://www.bing.com/toolbox/webmaster/ bing收录过程和百度基本一样，选择手动添加网站，也是需要验证，验证模式和百度一样。 添加网站地图sitemaps，和百度类似。 ","date":"2022-09-16","objectID":"/posts/2022-09-16-submit-to-search-engine/:3:0","tags":["hugo","搜索"],"title":"个人博客或网站提交搜索引擎收录","uri":"/posts/2022-09-16-submit-to-search-engine/"},{"categories":["静态博客"],"content":"谷歌收录提交 google提交入口：https://www.google.com/webmasters/tools/submit-url?hl=zh-CN 谷歌提交入口需要搭梯子才能访问。 谷歌收录也是需要验证，方式和百度bing类似。 ","date":"2022-09-16","objectID":"/posts/2022-09-16-submit-to-search-engine/:4:0","tags":["hugo","搜索"],"title":"个人博客或网站提交搜索引擎收录","uri":"/posts/2022-09-16-submit-to-search-engine/"},{"categories":["静态博客"],"content":"360收录提交 360提交入口：https://info.so.com/site_submit.html 360直接输入相关信息提交就行，不需要验证。 ","date":"2022-09-16","objectID":"/posts/2022-09-16-submit-to-search-engine/:5:0","tags":["hugo","搜索"],"title":"个人博客或网站提交搜索引擎收录","uri":"/posts/2022-09-16-submit-to-search-engine/"},{"categories":["静态博客"],"content":"其他收录入口 更多搜索引擎收录入口：https://www.sousuoyinqingtijiao.com/google/ ","date":"2022-09-16","objectID":"/posts/2022-09-16-submit-to-search-engine/:6:0","tags":["hugo","搜索"],"title":"个人博客或网站提交搜索引擎收录","uri":"/posts/2022-09-16-submit-to-search-engine/"},{"categories":["静态博客"],"content":"参考资料 https://blog.csdn.net/csdn_lijun/article/details/118959082 https://blog.takagisan.top/2022/01daa7ea61.html ","date":"2022-09-16","objectID":"/posts/2022-09-16-submit-to-search-engine/:7:0","tags":["hugo","搜索"],"title":"个人博客或网站提交搜索引擎收录","uri":"/posts/2022-09-16-submit-to-search-engine/"},{"categories":["静态博客"],"content":"前言 hugo博客搭建后，博客写作和发布流程较为复杂，因为是静态博客，每次都需要重新编译。不过，通过GitHub action，我们已经把这步交给GitHub去做了。我们只需提交即可触发自动编译并发布到你部署的平台，我目前托管在GitHub pages，vercel，render，netlify这四个平台上，不过8月下旬起vercel提供*.vercel.app域名已经被墙，我开启了独立域名 https://zhjin.eu.org 。 现在我们的整体写作流程如下： 通过命令hugo new posts/文章名.md 新建一篇文章。 用Markdown编辑器进行写作，图片资源本地存储或引入图床 上传文章，自动发布 这个过程稍微还是繁琐了一些，因此，怎么优化这个这个流程，把写作体验提升变得尤为重要。 ","date":"2022-09-11","objectID":"/posts/2022-09-11-hugo-obisidian-vscode/:1:0","tags":["hugo","Obisidian"],"title":"Markdown博客文章写作最佳体验，hugo+Obisidian+Vscode","uri":"/posts/2022-09-11-hugo-obisidian-vscode/"},{"categories":["静态博客"],"content":"obisidian ","date":"2022-09-11","objectID":"/posts/2022-09-11-hugo-obisidian-vscode/:2:0","tags":["hugo","Obisidian"],"title":"Markdown博客文章写作最佳体验，hugo+Obisidian+Vscode","uri":"/posts/2022-09-11-hugo-obisidian-vscode/"},{"categories":["静态博客"],"content":"1.obisidian简介 Markdown编辑器，市面上口碑不错的有typora，vscode，obisidian。不过typora从2021-11-23号起已经开始收费。obisidian也是最近才发现的一款神奇，使用体验下来也非常不错。 obisidian是什么，这里简单介绍一下。 一款离线的笔记软件（现在也推出收费云服务） markdown编辑工具，实时预览 文件都在本地存储 文件夹式管理 它可以智能生成文档关系图谱，记忆保存你上次打开的文件位置，界面简洁，文件夹式管理，不同文件可以链式关联，拥有丰富的插件。如果想要跨设备云同步，可以借助第三方云盘，比如坚果云。 ","date":"2022-09-11","objectID":"/posts/2022-09-11-hugo-obisidian-vscode/:2:1","tags":["hugo","Obisidian"],"title":"Markdown博客文章写作最佳体验，hugo+Obisidian+Vscode","uri":"/posts/2022-09-11-hugo-obisidian-vscode/"},{"categories":["静态博客"],"content":"2.新建文章 借助obisidian的插件QuickAdd，我们可以把新建文章的步骤进行优化，做成一个快捷指令。 在博客根目录，新建文件夹obs_sctipts，里面添加新建脚本NewBlog.js，内容如下： const util = require(\"util\"); const child_process = require(\"child_process\"); const exec = util.promisify(child_process.exec); //新建博客命名，这里以年月日时分秒命名，可自定义修改 function getCreateTimeAsFileName() { var d = new Date(); var year = d.getFullYear(); var month = d.getMonth() + 1; var day = d.getDate(); var hour = d.getHours(); var minute = d.getMinutes(); var second = d.getSeconds(); var time = year + \"-\" + month +\"-\" + day + \"day\" + hour + \"h\" + minute + \"m\" + second + \"s\"; return time; } // execute command function async function executeCommand() { const fileName = getCreateTimeAsFileName() + \".md\"; const { stdout, stderr } = await exec(\"hugo new posts/\" + fileName, { cwd: app.fileManager.vault.adapter.basePath, }); console.log(\"stdout:\", stdout); console.log(\"stderr:\", stderr); if (stdout) { new Notice(\"New Blog Created[\" + fileName + \"]\"); } else { new Notice(\"New Blog Create Faild. \" + stderr); } } module.exports = async function (context, req) { await executeCommand(); }; 进入 设置-第三方插件-关闭安全模式，浏览插件，安装QuickAdd插件。 QuickAdd插件，点击它的设置，新增一个宏定义，输入框输入【新建博客】-Macro-add Choice，这时你就可以看见增加了新建博客的宏定义，闪电符号点击勾选，这里是创建命令的意思。 创建完【新建博客】的宏定义后，点击下面Manage Macros-Configure 进行设置，User Scripts 找到脚本NewBlog 脚本，add添加。完成。 通过以上设定，你已经完成新建文章的快捷方式配置，按快捷键ctrl+p，调起命令面板，输入quickadd，就能看到新建博客的快捷按钮，我这里截图的两个都一样，步骤1中勾选闪电符号，就是在这里创建这个快捷命令QuickAdd：新建博客，点击就可看到新建博客成功。 ","date":"2022-09-11","objectID":"/posts/2022-09-11-hugo-obisidian-vscode/:2:2","tags":["hugo","Obisidian"],"title":"Markdown博客文章写作最佳体验，hugo+Obisidian+Vscode","uri":"/posts/2022-09-11-hugo-obisidian-vscode/"},{"categories":["静态博客"],"content":"3. 图床配置 ","date":"2022-09-11","objectID":"/posts/2022-09-11-hugo-obisidian-vscode/:2:3","tags":["hugo","Obisidian"],"title":"Markdown博客文章写作最佳体验，hugo+Obisidian+Vscode","uri":"/posts/2022-09-11-hugo-obisidian-vscode/"},{"categories":["静态博客"],"content":"参考资料 Hugo 博客写作最佳实践 https://zhuanlan.zhihu.com/p/497671233 ","date":"2022-09-11","objectID":"/posts/2022-09-11-hugo-obisidian-vscode/:3:0","tags":["hugo","Obisidian"],"title":"Markdown博客文章写作最佳体验，hugo+Obisidian+Vscode","uri":"/posts/2022-09-11-hugo-obisidian-vscode/"},{"categories":["tim"],"content":"tim是腾讯出品的QQ办公简洁版，主打办公，提供云文件、在线文档、邮件、日程、收藏等好用的办公功能，界面简洁清晰。 不过目前维护的频率不高，反馈的问题也大多没有收到回复。 因QQ办公，是tim的重度用户。两年前发现一个邮箱的问题至今没有解决，有点无语，近期再次遇到，网上查了一下，没有人说到点上，把解决方法整理了一下。 ","date":"2022-09-10","objectID":"/posts/2022-09-10-tim-email-exception/:0:0","tags":["tim","邮箱"],"title":"Tim邮箱密码错误的解决办法","uri":"/posts/2022-09-10-tim-email-exception/"},{"categories":["tim"],"content":"问题 安卓版tim邮箱账号密码报错，提示输入登录密码，这时候输入正确的登录密码，独立密码，授权码都报错。iOS版未经测试，如果也出现，应该是同个原因。 ","date":"2022-09-10","objectID":"/posts/2022-09-10-tim-email-exception/:1:0","tags":["tim","邮箱"],"title":"Tim邮箱密码错误的解决办法","uri":"/posts/2022-09-10-tim-email-exception/"},{"categories":["tim"],"content":"根源 先说说QQ邮箱的三个密码：登录密码，独立密码，授权码。 登录密码即QQ登录密码。 独立密码是QQ部分功能（漫游消息，邮箱等）的二次验证身份的密码。 授权码是QQ邮箱推出的，用于登录第三方客户端的专用密码。适用于登录以下服务：POP3/IMAP/SMTP/Exchange/CardDAV/CalDAV服务。 QQ邮箱登录，默认是和QQ登录密码相同，开启授权码，需要先启用独立密码，启用独立密码，则邮箱登录就变为独立密码，QQ登录密码就无法登录邮箱。而更改QQ密码以及独立密码又会触发授权码过期，需要重新获取新的授权码登录。额，没错，就是这么绕，这个关系搞清楚了，就能明白这个逻辑了。 上述问题出现的原因，是QQ原先登录安卓tim时，未开启过独立密码，tim关联QQ邮箱用的是QQ登录密码，而后开启了独立密码（独立密码和登录密码无法设相同），邮箱变成独立密码登录，验证发生变更，而tim邮箱验证还是调用的QQ登录密码，此时就会报账号密码错误，弹出重新输入，但是输入提示还是登录密码，也就是说它还是调用的是QQ登录密码验证，所以这个时候无论你输入什么，都是错的，它调用的验证就已经是错的了，这是个死结，也就出现了上面的问题。 到当前2022-9-11最新安卓tim版本V3.4.3098，这个问题还没有处理。 ","date":"2022-09-10","objectID":"/posts/2022-09-10-tim-email-exception/:2:0","tags":["tim","邮箱"],"title":"Tim邮箱密码错误的解决办法","uri":"/posts/2022-09-10-tim-email-exception/"},{"categories":["tim"],"content":"解决方法 删除邮箱账号，重新绑定。 tim邮箱模块，右上角三个点，设置，点击账号，删除，重新绑定，此时会识别调用独立密码登录，输入独立密码登录即可。 退出tim账号，彻底清除账号数据，重新登录。 或者卸载重装。 （不是很有必要） ","date":"2022-09-10","objectID":"/posts/2022-09-10-tim-email-exception/:3:0","tags":["tim","邮箱"],"title":"Tim邮箱密码错误的解决办法","uri":"/posts/2022-09-10-tim-email-exception/"},{"categories":["静态博客"],"content":"给valine评论系统升级 valine评论系统搭起来后，整体比较简洁，甚至，简单。 如果没限制的话，任何人都可以留言，数据会记录到leancloud管理端。但是因为没有后台，你查看评论只能在你博客页面查看或者去leancloud管理端去管理原始评论数据，就不是很方便。 ","date":"0001-01-01","objectID":"/posts/2022-09-06-valine-admin-and-email-notifications/:1:0","tags":["hugo","评论系统"],"title":"valine评论设置邮件通知和valine-admin后台管理","uri":"/posts/2022-09-06-valine-admin-and-email-notifications/"},{"categories":["静态博客"],"content":"基础版邮件提醒 如果不想太折腾的话，可以配置基础版的邮件提醒，但是它只能提醒有评论而已，无法查看评论内容和跳转评论页面。 这种方法实际是通过修改leancloud的密码重置邮件提醒来实现的，属于巧借力。 配置方式可参考：valine邮件提醒 ","date":"0001-01-01","objectID":"/posts/2022-09-06-valine-admin-and-email-notifications/:2:0","tags":["hugo","评论系统"],"title":"valine评论设置邮件通知和valine-admin后台管理","uri":"/posts/2022-09-06-valine-admin-and-email-notifications/"},{"categories":["静态博客"],"content":"进阶版邮件提醒和评论后台管理 进阶版邮件提醒，可以自定义配置回复模板样式，直接查看评论内容，和直达评论页面。 并且搭配使用独立的评论后台管理，可以在浏览器直接登录管理。 这里就需要使用到Valine-Admin，这是valine的增强版本，当前在GitHub上有多个开源版本。配置也不会很复杂。 这里采用leancloud国际版演示。 ","date":"0001-01-01","objectID":"/posts/2022-09-06-valine-admin-and-email-notifications/:3:0","tags":["hugo","评论系统"],"title":"valine评论设置邮件通知和valine-admin后台管理","uri":"/posts/2022-09-06-valine-admin-and-email-notifications/"},{"categories":["静态博客"],"content":"1. 云引擎部署 leancloud国际版进入后台，【云引擎】-》【部署】-》选择Git部署，输入Valine-Admin项目地址，保存，手动部署。 https://github.com/DesertsP/Valine-Admin ","date":"0001-01-01","objectID":"/posts/2022-09-06-valine-admin-and-email-notifications/:3:1","tags":["hugo","评论系统"],"title":"valine评论设置邮件通知和valine-admin后台管理","uri":"/posts/2022-09-06-valine-admin-and-email-notifications/"},{"categories":["静态博客"],"content":"2. 添加变量 添加一大批环境变量，这里有些要注意的点。 详细说明如下： 变量 示例 说明 SITE_NAME 六月长河的博客 [必填] 博客名称 SITE_URL https://kingpo.netlify.app/ [必填] 首页地址 SMTP_SERVICE QQ [必填] 邮件服务提供商，参照 Supported services SMTP_USER xxxxxx@qq.com [必填] SMTP 用户名 SMTP_PASS ccxxxxxxxxch [必填] SMTP 授权码（非邮箱独立密码！），参照客户端设置 SENDER_NAME 六月长河 [必填] 发件人 SENDER_EMAIL xxxxxx@qq.com [必填] 发件邮箱 MAIL_SUBJECT ${PARENT_NICK}，您在${SITE_NAME}上的评论收到了回复 [必填]@通知邮件主题（标题）模板 MAIL_TEMPLATE 填下文MAIL_TEMPLATE代码块 [必填]@通知邮件内容模板 MAIL_SUBJECT_ADMIN ${SITE_NAME}上有新评论了 [必填] 博主邮件通知主题模板 MAIL_TEMPLATE_ADMIN 填下文MAIL_TEMPLATE_ADMIN代码块 [必填] 博主邮件通知内容模板 SMTP_HOST smtp.qq.com [必填] SMTP_SERVICE 留空时，自定义 SMTP 服务器地址 SMTP_PORT 465或587，参照 POP3 与 SMTP [必填] SMTP_SERVICE 留空时，自定义 SMTP 端口 SMTP_SECURE true [选填] SMTP_SERVICE 留空时填写 BLOGGER_EMAIL xxxxx@gmail.com [选填] 博主通知收件地址，默认使用 SENDER_EMAIL ADMIN_URL https://lean.kinpo.eu.org/ 评论管理后台地址 COMMENT 新评论内容 NICK 新评论者昵称 PARENT_COMMENT 父级评论内容 PARENT_NICK 收件人昵称（被@者，父级评论人） POST_URL 评论文章地址（完整路径） MAIL_TEMPLATE代码块： \u003chtml\u003e \u003chead\u003e\u003c/head\u003e \u003cbody\u003e \u003cdiv style=\"border-radius: 10px 10px 10px 10px;font-size:13px; color: #555555;width: 666px;font-family:'Century Gothic','Trebuchet MS','Hiragino Sans GB',微软雅黑,'Microsoft Yahei',Tahoma,Helvetica,Arial,'SimSun',sans-serif;margin:50px auto;border:1px solid #eee;max-width:100%;background: #ffffff repeating-linear-gradient(-45deg,#fff,#fff 1.125rem,transparent 1.125rem,transparent 2.25rem);box-shadow: 0 1px 5px rgba(0, 0, 0, 0.15);\"\u003e \u003cdiv style=\"width:100%;background:#49BDAD;color:#ffffff;border-radius: 10px 10px 0 0;background-image: -moz-linear-gradient(0deg, rgb(67, 198, 184), rgb(255, 209, 244));background-image: -webkit-linear-gradient(0deg, rgb(67, 198, 184), rgb(255, 209, 244));height: 66px;\"\u003e \u003cp style=\"font-size:15px;word-break:break-all;padding: 23px 32px;margin:0;background-color: hsla(0,0%,100%,.4);border-radius: 10px 10px 0 0;color:#257db9\"\u003e您在\u003ca style=\"text-decoration:none;color:#257db9\" href=\"${SITE_URL}\"\u003e「Kingpo's Note」\u003c/a\u003e上的留言有新回复啦！\u003c/p\u003e \u003c/div\u003e \u003cdiv style=\"margin:40px auto;width:90%\"\u003e \u003cp\u003e亲爱的 \u003cspan style=\"color:#7777ff\"\u003e${PARENT_NICK}\u003c/span\u003e 同学，您曾在该页面/文章：\u003c/p\u003e \u003cdiv style=\"background: #fafafa repeating-linear-gradient(-45deg,#fff,#fff 1.125rem,transparent 1.125rem,transparent 2.25rem);box-shadow: 0 2px 5px rgba(0, 0, 0, 0.15);margin:20px 0px;padding:15px;border-radius:5px;font-size:14px;color:#555555;\"\u003e ${POST_URL} \u003c/div\u003e \u003cp\u003e发布了以下评论：\u003c/p\u003e \u003cdiv style=\"background: #fafafa repeating-linear-gradient(-45deg,#fff,#fff 1.125rem,transparent 1.125rem,transparent 2.25rem);box-shadow: 0 2px 5px rgba(0, 0, 0, 0.15);margin:20px 0px;padding:15px;border-radius:5px;font-size:14px;color:#555555;\"\u003e \u003cb\u003e${PARENT_COMMENT} \u003c/b\u003e \u003c/div\u003e \u003cp\u003e刚刚，用户 \u003cspan style=\"color:#7777ff\"\u003e${NICK}\u003c/span\u003e 给您的回复如下：\u003c/p\u003e \u003cdiv style=\"background: #fafafa repeating-linear-gradient(-45deg,#fff,#fff 1.125rem,transparent 1.125rem,transparent 2.25rem);box-shadow: 0 2px 5px rgba(0, 0, 0, 0.15);margin:20px 0px;padding:15px;border-radius:5px;font-size:14px;color:#555555;\"\u003e \u003cb\u003e${COMMENT}\u003c/b\u003e \u003c/div\u003e \u003cp\u003e您可以点击 \u003ca style=\"text-decoration:none; color:#12addb\" href=\"${POST_URL}#comments\"\u003e查看回复的完整內容\u003c/a\u003e，欢迎再次光临\u003ca style=\"text-decoration:none; color:#9fefaf\" href=\"${SITE_URL}\"\u003e ${SITE_NAME}\u003c/a\u003e。\u003c/p\u003e \u003cstyle type=\"text/css\"\u003ea:link{text-decoration:none}a:visited{text-decoration:none}a:hover{text-decoration:none}a:active{text-decoration:none}\u003c/style\u003e \u003c/div\u003e \u003c/div\u003e \u003ccenter\u003e Powered by LeanCloud \u003c/br\u003e Copyright \u0026copy; 2022 \u003ca href=\"https://kingpo.netlify.app\" style=\"color:auto;\"\u003e六月长河\u003c/a\u003e \u003cbr /\u003e \u003ca href=\"https://kingpo.netlify.app\"\u003e\u003cimg style=\"height:70px !important;\" src=\"https://kingpo.netlify.app/images/avatar.png\" /\u003e\u003c/a\u003e \u003c/center\u003e \u003cbr /\u003e \u003cbr /\u003e \u003c/body\u003e \u003c/html\u003e 样式如下： MAIL_TEMPLATE_ADMIN代码块： \u003chtml\u003e \u003chead\u003e\u003c/head\u003e \u003cbody\u003e \u003cdiv style=\"border-top:2px solid #12ADDB;box-shadow:0 1px 3px #AAAAAA;line-height:180%;padding:0 15px 12px;margin:50px auto;font-size:12px;\"\u003e \u003ch2 style=\"border-bottom:1px solid #DDD;font-size:14px;font-weight:normal;padding:13px 0 10px 0px;\"\u003e您在\u003ca style=\"text-decoration:none;color: #12ADDB;\" href=\"${SITE_URL}\" target","date":"0001-01-01","objectID":"/posts/2022-09-06-valine-admin-and-email-notifications/:3:2","tags":["hugo","评论系统"],"title":"valine评论设置邮件通知和valine-admin后台管理","uri":"/posts/2022-09-06-valine-admin-and-email-notifications/"},{"categories":["静态博客"],"content":"3. 绑定自定义域名 这里需要绑定自定义域名一个域名，它是你后台评论管理的地址，在你定义的域名解析中添加一条CNAME记录。 ","date":"0001-01-01","objectID":"/posts/2022-09-06-valine-admin-and-email-notifications/:3:3","tags":["hugo","评论系统"],"title":"valine评论设置邮件通知和valine-admin后台管理","uri":"/posts/2022-09-06-valine-admin-and-email-notifications/"},{"categories":["静态博客"],"content":"4. 评论管理 绑定自定义域名后，第1步也部署好后，即可进行评论管理。 首次使用需要先访问管理员注册页面https://绑定的域名/sign-up，注册管理员登录信息，如：https://lean.kinpo.eu.org/sign-up 然后直接使用域名就可以登录了。功能也比较简单，标记垃圾评论，删除，跳转查看。 ","date":"0001-01-01","objectID":"/posts/2022-09-06-valine-admin-and-email-notifications/:3:4","tags":["hugo","评论系统"],"title":"valine评论设置邮件通知和valine-admin后台管理","uri":"/posts/2022-09-06-valine-admin-and-email-notifications/"},{"categories":["静态博客"],"content":"5. 定时任务设置 因为leancloud免费版本提供的实例，有休眠策略，如果没有请求，会自动休眠。为了保持实例一直在线，我们可以设置定时任务函数来来唤醒。 两个定时任务函数设置 参看Valine Admin 配置手册定时任务设置 利用github actions设置定时 设置定时任务函数，很多人运行几天后会遇到leancloud平台因为流控原因无法激活定时唤醒任务的问题。 另一种方式是利用github actions中的workflow定时执行命令访问leancloud的web域名，实现唤醒。 name: 'wake comment system' on: push: schedule: - cron: '7,33,53 0-15,23 * * *' jobs: bot: runs-on: ubuntu-latest steps: - run: curl -sLo /dev/null ${{ secrets.DOMAIN }} 仓库-\u003esettings-\u003esecrets-\u003eactions-\u003eNew repository secret Name: DOMAIN Value: 你的web域名 参考资料： Valine Admin 邮件回复提醒 https://xiabor.com/valine-admin.html#valine%E7%9A%84%E9%82%AE%E4%BB%B6%E6%8F%90%E9%86%92 Valine Admin 配置手册 https://deserts.io/valine-admin-document/ ","date":"0001-01-01","objectID":"/posts/2022-09-06-valine-admin-and-email-notifications/:3:5","tags":["hugo","评论系统"],"title":"valine评论设置邮件通知和valine-admin后台管理","uri":"/posts/2022-09-06-valine-admin-and-email-notifications/"},{"categories":["技术问题"],"content":"使用kindle时，有时突然遇到不能联网的问题，提示以下信息。 您的kindle已连接WiFi网络,但无法连接互联网。请联系您的互联网服务供应商，寻求支持。 ","date":"2022-09-06","objectID":"/posts/2022-09-06-kindle-networking-exception/:0:0","tags":["kindle"],"title":"kindle联网异常的解决方法","uri":"/posts/2022-09-06-kindle-networking-exception/"},{"categories":["技术问题"],"content":"解决方法 法1： 数据线连接电脑在Kindle U盘根目录建立一个空白文件夹（不是文件），名为WIFI_NO_NET_PROBE（不含引号），重启。原理阻止wifi进行网络连接测试。 法2： 路由器给kindle设备分配静态ip（末段不要超100），或DHCP得到的内网IP 192.168.1.*，（*分配的动态ip不要超过100），dns改为谷歌的8.8.8.8或8.8.4.4。 建议直接用法2。 ","date":"2022-09-06","objectID":"/posts/2022-09-06-kindle-networking-exception/:1:0","tags":["kindle"],"title":"kindle联网异常的解决方法","uri":"/posts/2022-09-06-kindle-networking-exception/"},{"categories":["技术问题"],"content":"word，excel，ppt删除个人信息 office套件，word，excel，ppt 默认是会记录文档创建者，最后保存者，修改时间等个人信息的，有时我们不想要泄露这些信息时候，可以进行删除。 操作如下： 选中文档，右键 =》属性，详细信息，删除属性和个人信息，从此文件中删除以下属性，全选删除，确认即可。 注意： 如果对文档进行了加密，要先取消加密后，再删除属性才能生效，再加密后此时仅能看到windows登录账号名称 ","date":"2022-09-06","objectID":"/posts/2022-09-06-wordpptpdf-removes-document-personal-information/:0:1","tags":["Microsoft"],"title":"word/excel/ppt/pdf删除文档个人信息的方式","uri":"/posts/2022-09-06-wordpptpdf-removes-document-personal-information/"},{"categories":["技术问题"],"content":"pdf删除创建者信息 pdf文档默认记录的个人信息相对较少，但还是会有创建者名称信息。在浏览器打开查看设置属性信息可查。 目前测试到一种比较简单的处理方式如下。 pdf文件用chrome，Firefox浏览器打开，打印，另存为新pdf，会清除创建者等信息。 经测试用edge浏览器另存处理，创建者信息还是存在。 其他浏览器自行测试。 ","date":"2022-09-06","objectID":"/posts/2022-09-06-wordpptpdf-removes-document-personal-information/:0:2","tags":["Microsoft"],"title":"word/excel/ppt/pdf删除文档个人信息的方式","uri":"/posts/2022-09-06-wordpptpdf-removes-document-personal-information/"},{"categories":["静态博客"],"content":"前言 很多博客的评论，都能看到一些个性化的头像。这些头像和博客/网站有点关系，需要博客/网站配置支持Gravata，但关系又不大，因为它是个人的邮箱头像，每个人可以自由设定自己的邮箱头像。 ","date":"2022-08-22","objectID":"/posts/2022-08-22-gravatar/:0:1","tags":["邮箱头像"],"title":"全球通用头像Gravatar配置和镜像地址搜集","uri":"/posts/2022-08-22-gravatar/"},{"categories":["静态博客"],"content":"介绍 Gravatar是Globally Recognized Avatar的缩写，是gravatar.com推出的一项服务，意为“全球公用的头像”。如果在Gravatar的服务器上放置了你自己的头像，那么在任何支持Gravatar的博客或者留言本上留言时，只要提供你与这个头像关联的Email地址，就能够显示出你的Gravatar头像来。 这样就为大家提供了一个统一管理多个头像的平台，只要站点支持gravatar，就不必特意为每个站点单独上传头像，相当于gravatar提供头像的存储服务。 如果你没在Gravatar注册Email地址并上传头像，那么你填写email时显示的是会是一个默认头像。 由于WordPress的母公司Automattic 收购了 Gravatar，所以在WordPress博客中Gravatar头像使用很广泛，一般主题都自带Gravatar头像功能，当然随着Gravatar头像影响的扩大，Gravatar头像的使用已经不仅仅局限于WordPress了，Zblog、hexo，hugo等很多开源博客框架都支持Gravatar头像。 像我这里所使用的hugo博客也是用的Gravatar头像。 不过Gravatar在国内被墙，官方站点基本不能访问，需要梯子或者替换成其他可用的镜像源，我将搜集附于下方。 ","date":"2022-08-22","objectID":"/posts/2022-08-22-gravatar/:0:2","tags":["邮箱头像"],"title":"全球通用头像Gravatar配置和镜像地址搜集","uri":"/posts/2022-08-22-gravatar/"},{"categories":["静态博客"],"content":"使用 打开官网(http://cn.gravatar.com)，打不开的话需要梯子，点击页面中的Create Your Own Gravatar按钮，跳转到注册页面，输入你的Email、用户名（并不太重要）、登录密码（以后修改头像要用）。邮箱地址如果注册过了会红字提示，用户名只能是4个字符以上的小写字母否则红字提示等等，注意修改符合要求即可。点击Sign Up按钮，接下来的页面中如果出现We sent you a confirmation email!这些字样，那就说明你的提交有效。 进入你的邮箱，查收Activate XXX的邮件，点击邮件中的Activate Account链接，跳出的页面显示Your WordPress.com account has been activated!表明你的账号注册成功并激活了。 点击页面中的登录按钮，或者重新打开Gravatar网站点击右上角的Sign In按钮，接下来用你刚才注册的Email地址和密码登录，然后点击Add a new image链接，然后就通过上传图片（Upload new）或者使用在线图片（From url）等功能来设置与你Email地址绑定的头像了。 上传完图片，会有页面让你裁剪你的图片，即设置头像显示哪一部分，拖动框体即可，上传完可以预览头像，如果模糊了可以上传高清一点的图。 之后的页面是让你选择你图片的评级（这个在国外比较规范），因为有的朋友可能喜欢使用比较少儿不宜的图片，会影响小朋友的身心健康的。如果你的图片是比较一般的，就不用选择R/X之类的评级，直接选择G评级（通用型），这样大多数网站就可以显示你的头像。否则比如如果你选择了最高级X级，但某网站设置之显示R级以下的，那么你的头像就无法在该网站上显示出来。 可能需要站方短暂审核一下，一般如果选择评级G，而你的图片没什么特别的，很快就会通过。遇上慢的情况一般也就十分钟左右。 ","date":"2022-08-22","objectID":"/posts/2022-08-22-gravatar/:0:3","tags":["邮箱头像"],"title":"全球通用头像Gravatar配置和镜像地址搜集","uri":"/posts/2022-08-22-gravatar/"},{"categories":["静态博客"],"content":"镜像源搜集 gravatar官方的www源 https://www.gravatar.com/avatar/ gravatar官方的cn源 https://cn.gravatar.com/avatar/ gravatar官方的en源 https://en.gravatar.com/avatar/ gravatar官方的secure源 https://secure.gravatar.com/avatar/ Loli源 https://gravatar.loli.net/avatar/ 极客族 https://sdn.geekzu.org/avatar/ https://dn-qiniu-avatar.qbox.me/ http://gravatar.net-r-studio.top/ https://gravatar.zeruns.tech/avatar/ 参考资料： Gravatar头像 镜像地址大全 https://zhuanlan.zhihu.com/p/115248957 全球通用头像使用教程 http://www.ceniv.com/gravatar.html ","date":"2022-08-22","objectID":"/posts/2022-08-22-gravatar/:0:4","tags":["邮箱头像"],"title":"全球通用头像Gravatar配置和镜像地址搜集","uri":"/posts/2022-08-22-gravatar/"},{"categories":["静态博客"],"content":" valine评论设置 用hugo搭建的博客，采用fixIt主题（魔改于loveit），支持多种评论系统设置。valine评论是搭配LeanCloud平台来一起使用的。 ","date":"2022-08-22","objectID":"/posts/2022-08-22-opens-comment-system/:0:0","tags":["hugo"],"title":"hugo博客开启valine评论系统配置","uri":"/posts/2022-08-22-opens-comment-system/"},{"categories":["静态博客"],"content":"valine特性 快速 安全 Emoji 😉 无后端实现 MarkDown 全语法支持 轻量易用 文章阅读量统计 v1.2.0+ ","date":"2022-08-22","objectID":"/posts/2022-08-22-opens-comment-system/:0:1","tags":["hugo"],"title":"hugo博客开启valine评论系统配置","uri":"/posts/2022-08-22-opens-comment-system/"},{"categories":["静态博客"],"content":"LeanCloud介绍 LeanCloud（原 AVOS Cloud） 是针对移动应用的一站式云端服务，专注于为应用开发者提供工具和平台。提供包括LeanStorage 数据存储、LeanMessage 通信服务、LeanAnalytics 统计分析、LeanModules 拓展模块等四大类型的后端云服务，加速应用开发。 这里以valine为例讲解一下如何配置，其余博客诸如hexo等，都是大同小异。 主要步骤分为两步： leancloud注册获取ID和key config.toml配置文件配置参数 ","date":"2022-08-22","objectID":"/posts/2022-08-22-opens-comment-system/:0:2","tags":["hugo"],"title":"hugo博客开启valine评论系统配置","uri":"/posts/2022-08-22-opens-comment-system/"},{"categories":["静态博客"],"content":"leancloud获取APP ID ，APP Key，服务器地址 注册leancloud，国际版和国内版（华东区/华北区）可选，账户不互通的，国际版不需要实名，绑定域名也不需要备案。建议选国际版。 创建一个应用，开发版够用，名称随意。 在设置 \u003e 应用中可查看到 APP ID，APP Key和服务器地址。 注意：服务器地址这里是默认leancloud提供的域名，但是从2022年8月1号开始，这个域名国内不能直接访问了，因此需要绑定自定义api域名。我刚好遇到这个坑，原来用的是默认的域名，后面突然发现不能评论，一通操作才发现这个问题。 绑定域名 这里只开通评论的话，接3步骤绑定api域名即可，然后去域名管理中心添加一条cname指向它这里的域名，添加好后会显示部署证书，十几分钟后生效，提示已绑定。 再去应用凭证那里可以看到服务器地址更新为你刚绑定的api域名。 填写安全域名 填写应用 \u003e 设置 \u003e 安全设置中的 Web 安全域名。把你的博客域名添加上去。 由于 App ID 和 App Key 是完全暴露的，任何人都可以访问我们的资源。为了防止他人使用，我们需要配置 Web 安全域名，只有添加的域名才可以使用资源。 ","date":"2022-08-22","objectID":"/posts/2022-08-22-opens-comment-system/:0:3","tags":["hugo"],"title":"hugo博客开启valine评论系统配置","uri":"/posts/2022-08-22-opens-comment-system/"},{"categories":["静态博客"],"content":"config.toml配置 将上面步骤获得的APP ID，APP Key和服务器地址填入以下对应的参数位置。 #以下配置为 loveit，fixIt主题下的config配置 [params.page.comment.valine] appId = \"填写leancloud里的APP ID\" #参看上面步骤 appKey = \"填写leancloud里的APP Key\" #参看上面步骤 avatar = \"monsterid\" #评论者gravatar头像，参看全球头像那篇文章 enable = true enableQQ = true highlight = true lang = \"zh-CN\" meta = ['nick', 'mail', 'link'] #评论昵称，邮件，链接三个模块 pageSize = 10 placeholder = \"欢迎交流！匿名昵称留空即可，已开启邮箱留言自动通知提醒。\" #评论区提醒文字 recordIP = true #是否记录ip serverURLs = \"填写leancloud里的服务器地址\" #参看上面步骤 visitor = false #是否开启访问量统计 # emoji 数据文件名称，默认是 \"google.yml\" # (\"apple.yml\", \"google.yml\", \"facebook.yml\", \"twitter.yml\") # 位于 \"themes/FixIt/assets/data/emoji/\" 目录 # 可以在你的项目下相同路径存放你自己的数据文件： # \"assets/data/emoji/\" commentCount = true #评论统计 emoji = \"\" # emoji表情 配置后 记得在文章的前置参数里把comment改为true。 title: \"valine评论系统配置\" subtitle: \"\" date: 2022-08-22T11:15:06+08:00 author: \"Kingpo\" authorLink: \"\" authorEmail: \"\" description: \"\" keywords: \"\" comment: true #评论开启 weight: 0 运行效果如下： 至此，评论功能已经开启。 可以进行评论了，这里没做限制，任何人均可留言，昵称或邮箱，网址留或不留均可。 valine无后端，那么评论的数据在哪里管理呢。 答案是在leancloud平台上，评论数据都会存储在名为 Comment 的 Class 中，需要自行登陆 LeanCloud 应用 管理。 进入你的应用 \u003e 存储 \u003e Comment，之后你可以对所有评论进行操作。 如果想要评论数据后端管理，并开启实时邮件通知，参看我这篇valine评论设置邮件通知和valine-admin后台管理 我的博客即将同步至腾讯云开发者社区，邀请大家一同入驻：(https://cloud.tencent.com/developer/support-plan?invite_code=2rznedmkkuww8) ","date":"2022-08-22","objectID":"/posts/2022-08-22-opens-comment-system/:0:4","tags":["hugo"],"title":"hugo博客开启valine评论系统配置","uri":"/posts/2022-08-22-opens-comment-system/"},{"categories":["工具"],"content":"用vs code时，由于深色背景和选中内容背景很难区分开，因此做了自定义修改。 打开vscode 文件 =》首选项 =》 设置 =》 搜索color 找到 Hediet \u003e Vscode- drawio: Custom Color Schemes 的 在settings.json中编辑 打开后，添加下面代码，点击颜色块，可以自由选取颜色。 建议选中内容和tab的颜色也做区分，利于分辨，我这里截图时没做区分。 \"workbench.colorCustomizations\": { //设置用户选中代码段的颜色 \"editor.selectionBackground\": \"#09a050\", \"editor.selectionHighlightBackground\": \"#09a050\", //设置活动tab窗口颜色 \"tab.activeBackground\": \"#5f80629a\" }, ","date":"2022-08-17","objectID":"/posts/2022-08-17-vscode-modifies-selection-and-tab-colors/:0:0","tags":["vs code"],"title":"VS Code自定义修改选中内容和tab颜色","uri":"/posts/2022-08-17-vscode-modifies-selection-and-tab-colors/"},{"categories":["静态博客"],"content":"困扰的问题 hugo博客搭建好后，陆陆续续发现一些问题。大都成功进行了处理。 其中一个最头大的问题就是：文章更新时间异常。 文章更新时间异常 文章更新时间，本地和远程部署的不同，远程通过github action|vecel部署，远程部署后的时间不对，会把所有文章时间都更为最新。 每次更新文章后，本地显示所有文章更新时间正常，没有修改的还是保留旧的更新日期，而通过github action|vecel自动部署后，所有文章更新时间都会改为最新此次更新时间，那些此次没有做修改的文章也一并全部更新。 注意，不是发表时间，发表时间没有问题。 这个bug，花费了我很多时间精力才找到原因，终于解决了这个问题。 ","date":"2022-08-14","objectID":"/posts/2022-08-14-fixed-git-update-time-exception/:0:1","tags":["hugo"],"title":"hugo博客github action部署后文章更新时间异常修复","uri":"/posts/2022-08-14-fixed-git-update-time-exception/"},{"categories":["静态博客"],"content":"hugo时间字段 解决这个问题，我们先说hugo博客的几个时间字段说起。 hugo全局配置文件为config.toml/yaml/json 在hugo中日期（时间）是非常重要的字段，hugo的官方配置文档configuration(https://gohugo.io/getting-started/configuration/#configure-dates)提供一个配置日期的section [frontmatter] [frontmatter] # 左边意为，变量 .Date 将会被赋值为右边数组中最先找到的的日期值 date = ['date', 'publishDate', 'lastmod'] expiryDate = ['expiryDate'] lastmod = [':git', 'lastmod', 'date', 'publishDate'] publishDate = ['publishDate', 'date'] publishDate: 变量，发表日期 expiryDate：变量，有效期 lastmod：变量，最后修改日期 :git：git文件提交修改时间 这是官方列举的字段和基本配置，不过说明不是很详细。 这里说明一下，=左边的是变量，右边中括号的是变量值，需要在对应模板里添加后才生效。 ","date":"2022-08-14","objectID":"/posts/2022-08-14-fixed-git-update-time-exception/:0:2","tags":["hugo"],"title":"hugo博客github action部署后文章更新时间异常修复","uri":"/posts/2022-08-14-fixed-git-update-time-exception/"},{"categories":["静态博客"],"content":"最后更新时间 这里我们只探讨最后更新时间 lastmod 一般主题里的配置方式是这样： [frontmatter] lastmod = [\":git\", \":fileModTime\", \"lastmod\", \":defalut\"] :git：git文件提交修改时间 :fileModTime：文件修改时间 lastmod：文章里lastmod字段 :defalut：默认时间 这里lastmod变量获取，以git文件提交修改时间，文件修改时间这样排，文章里\"lastmod“字段可不加，这样是没问题的。 我的博客就是以此配置为准，本地运行时，更新时间显示正常。 如果要加”lastmod“字段，在创建文章模板里添加以下一行。添加”lastmod\"，有个好处就是可自由修改这个字段的时间。 hugo默认位置为archetypes/default.md或者主题下目录下xx主题/archetypes/posts.md，主题目录下如果有增加模板，创建时会以主题目录下的模板来创建。 lastmod: {{ .Date }} 然后再去config.toml/yaml/json 调整这里顺序即可： [frontmatter] lastmod = [\":git\", \"lastmod\", \":fileModTime\", \":defalut\"] ","date":"2022-08-14","objectID":"/posts/2022-08-14-fixed-git-update-time-exception/:0:3","tags":["hugo"],"title":"hugo博客github action部署后文章更新时间异常修复","uri":"/posts/2022-08-14-fixed-git-update-time-exception/"},{"categories":["静态博客"],"content":"问题解决 好了，按以上配置，本地运行时，更新时间显示正常，这没有任何问题。 问题来了，通过GitHub action 部署后（我的verccel从GitHub直接同步过去），就出现问题了，每次一提交更新，会把所有文章时间都更为最新。 本地端没问题，说明问题就出在GitHub action 部署过程了。 补充提示一下，有一个坑 ： GitHub action的Schedule 运行不准时 GitHub action上的默认配置时间有个坑，设定的 schedule 是UCT时间的08:00，比北京时间快8个小时。因此运行环境要改为北京时间。 解决方法： 0. 填坑 在.github/workflows/xx.yml yml文件中添加 2行设置当前环境时区 name: Hugo build and deploy on: push: env: TZ: Asia/Shanghai # 设置当前环境时区 1. 开启gitinfo config.toml/yaml/json #获取git信息 enableGitInfo = true #设为true 2. gihutb action里yaml上配置 建构前新增以下配置，主要是quotePath，默认情况下，文件名包含中文时，git会使用引号吧文件名括起来，这会导致action中无法读取:GitInfo变量，所以要设置Disable quotePath[^1] - name: Git Configuration run: | git config --global core.quotePath false git config --global core.autocrlf false git config --global core.safecrlf true git config --global core.ignorecase false 使用checkout的话 fetch-depth 需要设为0，depth默认是为1，默认只拉取分支最近一次commit，可能会导致一些文章的GitInfo变量无法获取，设为0代表拉去所有分支所有提交。 uses: actions/checkout@v2 fetch-depth: 0 #设为0 以下是我最终的yml配置文件 name: Hugo build and deploy on: push: env: TZ: Asia/Shanghai # 设置当前环境时区 jobs: Actions-Hugo-Deploy: runs-on: ubuntu-latest steps: - name: Check out repository code uses: actions/checkout@v2 with: submodules: recursive # Fetch Hugo themes (true OR recursive) fetch-depth: 0 # Fetch all history for .GitInfo and .Lastmod - name: Git Configuration run: | git config --global core.quotePath false git config --global core.autocrlf false git config --global core.safecrlf true git config --global core.ignorecase false - name: Setup Hugo uses: peaceiris/actions-hugo@v2 with: hugo-version: latest extended: true - name: Build Hugo static files run: hugo -v --gc --minify - name: Deploy to Github Pages uses: peaceiris/actions-gh-pages@v3 with: DEPLOY_KEY: ${{ secrets.DEPLOY_KEY }} external_repository: Charlie-king/Charlie-king.github.io publish_branch: main publish_dir: ./public - name: NPM install run: npm install - name: Update Algolia index env: ALGOLIA_APP_ID: B6R922P6DD ALGOLIA_ADMIN_KEY: ${{ secrets.ALGOLIA_ADMIN_KEY }} ALGOLIA_INDEX_NAME: 'dev_hugo' ALGOLIA_INDEX_FILE: './public/index.json' run: npm run algolia 参考： # Github Action 自动修改文章的更新日期 # [BUG] 目录所有文章-最近更新，本地与远程打包不同，数据不对 ","date":"2022-08-14","objectID":"/posts/2022-08-14-fixed-git-update-time-exception/:0:4","tags":["hugo"],"title":"hugo博客github action部署后文章更新时间异常修复","uri":"/posts/2022-08-14-fixed-git-update-time-exception/"},{"categories":null,"content":"Kingpo's tools","date":"2022-07-19","objectID":"/tool/","tags":null,"title":"我的工具箱","uri":"/tool/"},{"categories":null,"content":" 提示 工具资源，奇门遁甲。 工具导航站 学术资源 电子书 我爱运营 scihub检1 scihub检2 z-library 及时工具 Oalib 果汁实验室 iData 创造师导航 谷歌学术镜像 工具达人 Library genesis 网站检测 其他 网盘 短链 迅捷画图 文叔叔 三维推 在线流程图 钛盘 sojson 地址信息生成 轻松传 小码短链接 临时邮箱 airportal 缩我短 云短信 视频压缩 在线抠图 ","date":"2022-07-19","objectID":"/tool/:0:0","tags":null,"title":"我的工具箱","uri":"/tool/"},{"categories":null,"content":"Kingpo's friends","date":"2022-07-19","objectID":"/friends/","tags":null,"title":"友情链接","uri":"/friends/"},{"categories":null,"content":"本站信息 nickname: 六月长河 avatar: https://kingpo.netlify.app/images/avatar.png url: https://charlie-king.github.io discription: 桃李春风一杯酒，江湖夜雨十年灯。 ","date":"2022-07-19","objectID":"/friends/:1:0","tags":null,"title":"友情链接","uri":"/friends/"},{"categories":null,"content":"友情提示 叮叮 互换友链，请按以上格式留言。 网站故障，停止维护和言论不正可能会被取消链接！ 欢迎交流，花径不曾缘客扫，蓬门今始为君开。 ","date":"2022-07-19","objectID":"/friends/:2:0","tags":null,"title":"友情链接","uri":"/friends/"},{"categories":["静态博客"],"content":"12个精美admonition样式的介绍","date":"2022-07-15","objectID":"/posts/2022-07-15-hugo-admonition/","tags":["hugo"],"title":"hugo主题美化功能admonition","uri":"/posts/2022-07-15-hugo-admonition/"},{"categories":["静态博客"],"content":"admonition admonition，是FixIt/LoveIt系列主题集成的短代码功能，有着炫酷的效果，可以美化文章笔记，但它并不是Markdown的标准语法，不能被Markdown正常渲染，需要额外的配置。类似样式效果很多笔记软件的插件也有，不过代码形式和展示样式不完全一样，大多类似。 有人喜欢它的优美的展示效果，有人觉得它是对Markdown语法的污染，使用因人而异。 admonition shortcode 有以下命名参数： type [必需]（第一个位置参数） admonition 横幅的类型，默认值是 note。 title [可选]（第二个位置参数） admonition 横幅的标题，默认值是 type 参数的值。（支持 markdown） open [可选]（第三个位置参数） 横幅内容是否默认展开，默认值是 true。 hugo的LoveIt，FixIt主题都集成了admonition shorcode功能，可以比较方便的进行使用，语法和样式效果如下。 一个admonition示例： {{\u003c admonition type=tip title=\"This is a tip\" open=false \u003e}} 一个 **提示** 横幅 {{\u003c /admonition \u003e}} 或者 {{\u003c admonition tip \"This is a tip\" false \u003e}} 一个 **提示** 横幅 {{\u003c /admonition \u003e}} 显示效果如下： Tip 一个 提示 横幅 ","date":"2022-07-15","objectID":"/posts/2022-07-15-hugo-admonition/:1:0","tags":["hugo"],"title":"hugo主题美化功能admonition","uri":"/posts/2022-07-15-hugo-admonition/"},{"categories":["静态博客"],"content":"12种样式代码和效果 ","date":"2022-07-15","objectID":"/posts/2022-07-15-hugo-admonition/:2:0","tags":["hugo"],"title":"hugo主题美化功能admonition","uri":"/posts/2022-07-15-hugo-admonition/"},{"categories":["静态博客"],"content":"note {{\u003c admonition \u003e}} 一个 **注意** 横幅 {{\u003c /admonition \u003e}} 注意 一个 注意 横幅 ","date":"2022-07-15","objectID":"/posts/2022-07-15-hugo-admonition/:2:1","tags":["hugo"],"title":"hugo主题美化功能admonition","uri":"/posts/2022-07-15-hugo-admonition/"},{"categories":["静态博客"],"content":"tip {{\u003c admonition tip\u003e}} 一个 **提示** 横幅 {{\u003c /admonition \u003e}} 技巧 一个 提示 横幅 ","date":"2022-07-15","objectID":"/posts/2022-07-15-hugo-admonition/:2:2","tags":["hugo"],"title":"hugo主题美化功能admonition","uri":"/posts/2022-07-15-hugo-admonition/"},{"categories":["静态博客"],"content":"abstract {{\u003c admonition abstract\u003e}} 一个 **摘要** 横幅 {{\u003c /admonition \u003e}} 摘要 一个 摘要 横幅 ","date":"2022-07-15","objectID":"/posts/2022-07-15-hugo-admonition/:2:3","tags":["hugo"],"title":"hugo主题美化功能admonition","uri":"/posts/2022-07-15-hugo-admonition/"},{"categories":["静态博客"],"content":"info {{\u003c admonition info \u003e}} 一个 **信息** 横幅 {{\u003c /admonition \u003e}} 信息 一个 信息 横幅 ","date":"2022-07-15","objectID":"/posts/2022-07-15-hugo-admonition/:2:4","tags":["hugo"],"title":"hugo主题美化功能admonition","uri":"/posts/2022-07-15-hugo-admonition/"},{"categories":["静态博客"],"content":"success {{\u003c admonition success \u003e}} 一个 **成功** 横幅 {{\u003c /admonition \u003e}} 成功 一个 成功 横幅 ","date":"2022-07-15","objectID":"/posts/2022-07-15-hugo-admonition/:2:5","tags":["hugo"],"title":"hugo主题美化功能admonition","uri":"/posts/2022-07-15-hugo-admonition/"},{"categories":["静态博客"],"content":"question {{\u003c admonition question \u003e}} 一个 **问题** 横幅 {{\u003c /admonition \u003e}} 问题 一个 问题 横幅 ","date":"2022-07-15","objectID":"/posts/2022-07-15-hugo-admonition/:2:6","tags":["hugo"],"title":"hugo主题美化功能admonition","uri":"/posts/2022-07-15-hugo-admonition/"},{"categories":["静态博客"],"content":"warning {{\u003c admonition warning \u003e}} 一个 **警告** 横幅 {{\u003c /admonition \u003e}} 警告 一个 警告 横幅 ","date":"2022-07-15","objectID":"/posts/2022-07-15-hugo-admonition/:2:7","tags":["hugo"],"title":"hugo主题美化功能admonition","uri":"/posts/2022-07-15-hugo-admonition/"},{"categories":["静态博客"],"content":"failure {{\u003c admonition failure \u003e}} 一个 **失败** 横幅 {{\u003c /admonition \u003e}} 失败 一个 失败 横幅 ","date":"2022-07-15","objectID":"/posts/2022-07-15-hugo-admonition/:2:8","tags":["hugo"],"title":"hugo主题美化功能admonition","uri":"/posts/2022-07-15-hugo-admonition/"},{"categories":["静态博客"],"content":"danger {{\u003c admonition danger \u003e}} 一个 **危险** 横幅 {{\u003c /admonition \u003e}} 危险 一个 危险 横幅 ","date":"2022-07-15","objectID":"/posts/2022-07-15-hugo-admonition/:2:9","tags":["hugo"],"title":"hugo主题美化功能admonition","uri":"/posts/2022-07-15-hugo-admonition/"},{"categories":["静态博客"],"content":"bug {{\u003c admonition bug \u003e}} 一个 **Bug** 横幅 {{\u003c /admonition \u003e}} Bug 一个 Bug 横幅 ","date":"2022-07-15","objectID":"/posts/2022-07-15-hugo-admonition/:2:10","tags":["hugo"],"title":"hugo主题美化功能admonition","uri":"/posts/2022-07-15-hugo-admonition/"},{"categories":["静态博客"],"content":"example {{\u003c admonition example \u003e}} 一个 **示例** 横幅 {{\u003c /admonition \u003e}} 示例 一个 示例 横幅 ","date":"2022-07-15","objectID":"/posts/2022-07-15-hugo-admonition/:2:11","tags":["hugo"],"title":"hugo主题美化功能admonition","uri":"/posts/2022-07-15-hugo-admonition/"},{"categories":["静态博客"],"content":"quote {{\u003c admonition quote \u003e}} 一个 **引用** 横幅 {{\u003c /admonition \u003e}} 引用 一个 引用 横幅 ","date":"2022-07-15","objectID":"/posts/2022-07-15-hugo-admonition/:2:12","tags":["hugo"],"title":"hugo主题美化功能admonition","uri":"/posts/2022-07-15-hugo-admonition/"},{"categories":["静态博客"],"content":"我终于搭建了专属个人博客！","date":"2022-07-15","objectID":"/posts/2022-07-15-hugo-blog-build/","tags":["hugo"],"title":"hugo博客搭建之旅","uri":"/posts/2022-07-15-hugo-blog-build/"},{"categories":["静态博客"],"content":"hugo个人博客搭建 ","date":"2022-07-15","objectID":"/posts/2022-07-15-hugo-blog-build/:1:0","tags":["hugo"],"title":"hugo博客搭建之旅","uri":"/posts/2022-07-15-hugo-blog-build/"},{"categories":["静态博客"],"content":"前言 记录一下，建站过程，采坑记录，随时更新。 一直以来都有搭建个人博客的想法，然而一直以来都没有开始行动。近来逛V站，又刷到了个人博客方面的内容，直接行动了。 GitHub上最主流的3大静态博客建站框架为： hugo hexo Jekyll 为什么选择hugo，v站上留言推荐最多的博客建站框架，GitHub上star数60.5k ，广受欢迎。 它是一种用 Go 语言编写的静态网站生成器。简单、易用、高效、易扩展、快速部署。 号称是世界上编译最快的框架，搭建静态网站，简单直接。 我的这个网站托管在GitHub pages(https://charlie-king.github.io)和vercel(https://kingpo.vercel.app)上，虽然服务器都在国外，但完全免费，且无需备案。 如果要配置到自己国内服务器上，需要购买服务器，并购买域名，进行域名备案。 ","date":"2022-07-15","objectID":"/posts/2022-07-15-hugo-blog-build/:1:1","tags":["hugo"],"title":"hugo博客搭建之旅","uri":"/posts/2022-07-15-hugo-blog-build/"},{"categories":["静态博客"],"content":"建站工具 框架：hugo 版本：hugo extended 0.101.0 主题：FixIt 托管：GitHub和vercel ","date":"2022-07-15","objectID":"/posts/2022-07-15-hugo-blog-build/:1:2","tags":["hugo"],"title":"hugo博客搭建之旅","uri":"/posts/2022-07-15-hugo-blog-build/"},{"categories":["静态博客"],"content":"目前配置实现的功能 使用到的主题是FixIt(https://github.com/Lruihao/FixIt)，是基于LoveIt(https://github.com/dillonzq/LoveIt)改进而来。 FixIt文档 | LoveIt文档 桌面端/移动端响应式布局 深色/浅色主题模式 搜索功能配置algolia（独立配置） 配置评论功能valine（独立配置） valine开启邮箱回复提醒和配置后台valine-admin管理（独立配置） 总访问量，文章访问量，字数统计，文章预计阅读时间 微信，支付宝赞赏支持（独立配置） 添加社交账户，文章分享 锁定/复制代码 内嵌音乐播放器 内嵌bilibili视频 开启百度统计（独立配置） 使用GitHub Action自动化部署到GitHub pages并同步托管到vercel（独立配置） 结合obsidian插件quickadd本地快速创建文件（独立配置） 搭建GitHub、sm.ms图床，配置picgo插件（独立配置） ","date":"2022-07-15","objectID":"/posts/2022-07-15-hugo-blog-build/:1:3","tags":["hugo"],"title":"hugo博客搭建之旅","uri":"/posts/2022-07-15-hugo-blog-build/"},{"categories":["静态博客"],"content":"搭建过程 安装hugo hugo 可以查看官方文档。 以下讲解均基于windows环境。 下载安装 方式1： 从GitHub下载源码，自行编译成二进制文件，需要先安装go运行环境。 方式2： 从GitHub 直接直接下载编译好的二进制文件.exe 这里用的是扩展版 hugo_extended_0.101.0 配置环境变量 下载好后，解压到某个文件夹里，复制到bin层路径，添加到电脑的环境变量里。 控制面板 \u003e 系统和安全 \u003e 系统 \u003e 高级系统设置 \u003e 高级 \u003e 环境变量 在用户变量和系统变量里，都点击path新建，复制你（hugo.exe所在目录）D:xxx/hugo/bin填进去。 恭喜你，你已经完成了hugo的安装。 测试：打开命令行，输入hugo version，确认，可以看到版本号，说明已经正确配置好了hugo环境。 hugo v0.101.0-466fa43c16709b4483689930a4f9ac8add5c9f66+extended windows/amd64 BuildDate=2022-06-16T07:09:16Z VendorInfo=gohugoio 创建网站 先建立一个目录，比如我这里d盘下project，等会生成的博客网站存放在里面 命令行 cd project hugo new site hugo-blog 这时会提示祝贺你，你的hugo网站已经生成，然后提示你去下载主题。 Congratulations! Your new Hugo site is created in D:\\project\\hugo-blog. Just a few more steps and you're ready to go: 1. Download a theme into the same-named folder. Choose a theme from https://themes.gohugo.io/ or create your own with the \"hugo new theme \u003cTHEMENAME\u003e\" command. 2. Perhaps you want to add some content. You can add single files with \"hugo new \u003cSECTIONNAME\u003e\\\u003cFILENAME\u003e.\u003cFORMAT\u003e\". 3. Start the built-in live server via \"hugo server\". 这时你会在mywebsite文件夹里看到你刚生成blog文件夹。 blog文件夹里文件目录为 D:. │ config.toml #全局参数配置文件 │ ├─archetypes #模板文件所在文件夹 │ default.md #模板文件，hugo new 新建Markdown文件自动生成部分 │ ├─content #存放网页内容的目录 ├─data #存放数据文件，一般json文件，hugo提供相关命令可从data中读取数据，渲染到html页面，实 │ 现业务数据与模板分离 │ ├─layouts #存放自定义的模板文件，hugo优先使用此目录下模板，未发现再去themes同目录下查找 ├─public #编译生成的静态文件存放目录 ├─static #存放静态文件，如css，js，img等文件目录，hugo直接复制到public目录下，不会做渲染 └─themes #存放网站主题，可存多个主题，在config.toml全局文件中配置指定，也可在执行渲染是加参 数–theme=xx指定 到这里你的网站已经创建好了，再输入以下命令，网站就跑起来啦。 hugo server 在浏览器里，输入：localhost:1313 就可以访问了。 不过这时候网站还是空的，hugo初始生成的网站默认不带样式，我们需要选个主题安装。 安装主题 主题要下载到themes这个目录下，使用git clone ，如没配置git ，参看我的git安装配置文章。 进到themes目录，初始化git init 下载主题： git clone https://github.com/dillonzq/LoveIt 或 git clone https://github.com/dillonzq/FixIt 下载完后，里面一般都会有一个exampleSite\\文件夹，里面放的是主题的样式，你可以直接把里面的config.toml中的内容复制到你的博客主目录的config.toml中。 下一步，开始个性化配置config文件。 修改config文件 config.toml文件是全局配置参数文件，是博客页面功能控制的总开关。 每个主题都有他特有的一些功能，都在其提供的config.toml里面开关修改。 【待续】 其他个性化设置 【待续】 hugo常用命令说明 【待续】 ","date":"2022-07-15","objectID":"/posts/2022-07-15-hugo-blog-build/:1:4","tags":["hugo"],"title":"hugo博客搭建之旅","uri":"/posts/2022-07-15-hugo-blog-build/"},{"categories":null,"content":" 白云苍狗，岁月如流 对于想要拥有一个独立博客这个事 是我心里存在的一个执念 一直以来我都觉得拥有一个独立博客是一件很酷的事情 而到今年才动手实现 但这仍然是一件令人兴奋的事情 年轻 就该拥有热血和澎湃的激情 心中激荡，念念不忘 何时出发都不算晚 当下正是最好的时光 部署 本站多线部署于以下平台，请选择一个访问最快的进行访问 github.io 主域名ttzz.eu.org cloudflare 独立域名ajin.eu.org vercel.app netlify.app render.com vercel.app域名从8.21起国内已被墙，配置的独立域名不受影响 站点调整记录 2022-10-28 主域名启用新域名(ttzz.eu.org)，堂堂正正首拼 2022-10-05 调整所有文章文件名称为英文名，调整展示链接，升级主题版本 2022-08-01 调整各托管平台同步博客模式 2022-08-01 增加托管netlify，render，cloudflare 2022-08-01 解决文章更新时间异常（git文件含中文名时间读取异常） 2022-08-01 配置微信，支付宝赞赏码 2022-08-01 valine 开启邮箱回复提醒和配置后台 valine-admin 管理 2022-08-01 配置obsidian，picgo图床插件 2022-07-25 配置github actions自动发布 2022-07-20 配置搜索功能，配置valine基础评论 2022-07-15 博客上线，托管github pages，vercel 2022-07-13 博客搭建 公众号 分享好用，高效，全面的科研/软件/网站/资源/工具利器，让你如虎添翼，飞驰人生。 ","date":"2022-07-07","objectID":"/about/:0:0","tags":null,"title":"关于","uri":"/about/"},{"categories":["技术问题"],"content":"sql导数据出来缺失 之前在导数据时，从sql server数据库表中导出数据到excel表，数据量有几十到百万的量级。 ","date":"2022-03-08","objectID":"/posts/2022-03-08-sql-export-data-exception/:0:0","tags":["sql"],"title":"SQL复制(导出)数据到excel行数缺失解决方案","uri":"/posts/2022-03-08-sql-export-data-exception/"},{"categories":["技术问题"],"content":"导的方式： 直接复制，粘贴到excel表 右键导出成csv格式表 ","date":"2022-03-08","objectID":"/posts/2022-03-08-sql-export-data-exception/:0:1","tags":["sql"],"title":"SQL复制(导出)数据到excel行数缺失解决方案","uri":"/posts/2022-03-08-sql-export-data-exception/"},{"categories":["技术问题"],"content":"遇到问题 问题1： 数据缺失，整行数据丢失 问题2： 行数缺失，数据和其他行混乱 ","date":"2022-03-08","objectID":"/posts/2022-03-08-sql-export-data-exception/:0:2","tags":["sql"],"title":"SQL复制(导出)数据到excel行数缺失解决方案","uri":"/posts/2022-03-08-sql-export-data-exception/"},{"categories":["技术问题"],"content":"原因和解决方案 经过检查，发现存在两种原因，并找到了两种解决的方法。 1. sql表里字段有特殊编码格式的内容，导致复制粘贴或右键导出csv时数据无法正确识别，出现问题1，数据缺失，整行数据丢失 解决方法： 导出时把字段数据类型转换为nvarchar，SQL Server NVARCHAR 数据类型用于存储可变长度的Unicode字符串数据，如：'【数据名】' = convert(nvarchar(500),title) 2. sql表里字段里有引号，复制数据到excel表，如果字段里含有引号，会引起串行，导致问题2，行数缺失，数据和其他行混乱，而通过右键导出csv是不受影响，csv单元格分隔符是逗号 。 解决方法： 1)通过右键先导出csv，再另存为excel 2)导出前去除字段里的引号（会影响字段值），引号替换为空，如：'书名' = Replace(Title,'\"','') ","date":"2022-03-08","objectID":"/posts/2022-03-08-sql-export-data-exception/:0:3","tags":["sql"],"title":"SQL复制(导出)数据到excel行数缺失解决方案","uri":"/posts/2022-03-08-sql-export-data-exception/"},{"categories":null,"content":" 我有嘉宾，鼓瑟吹笙 客至 舍南舍北皆春水，但见群鸥日日来。 花径不曾缘客扫，蓬门今始为君开。 盘飧市远无兼味，樽酒家贫只旧醅。 肯与邻翁相对饮，隔篱呼取尽余杯。 ","date":"2021-09-13","objectID":"/guestbook/:0:0","tags":null,"title":"留言板","uri":"/guestbook/"},{"categories":["微软"],"content":"微软microsoft账号可以云同步多设备同步全套设置，对于多设备办公的人非常友好。 大部分时候，可以直接访问登录，而onedrive被墙，很难访问。 有时microsoft账号无法登录，这里提供两种解决方法。 ","date":"2021-03-29","objectID":"/posts/2021-03-29-login-microsoft-account-exception/:0:0","tags":["Microsoft"],"title":"无法登录微软账号的解决方法","uri":"/posts/2021-03-29-login-microsoft-account-exception/"},{"categories":["微软"],"content":"解决方法： 搭梯子，这里注意，不是所有的都可以，需要米国的梯。 将dns临时改为4.2.2.2，登录完后改回来。【方便直接】 网络-更改适配器-属性- ","date":"2021-03-29","objectID":"/posts/2021-03-29-login-microsoft-account-exception/:1:0","tags":["Microsoft"],"title":"无法登录微软账号的解决方法","uri":"/posts/2021-03-29-login-microsoft-account-exception/"},{"categories":["微软"],"content":"如何把word文档里自动序号转为文本，直接可以复制出来，这里提供一种方法。 ","date":"2021-03-29","objectID":"/posts/2021-03-29-word-auto-sequence-number/:0:0","tags":["word"],"title":"把word文档里自动序号转为文本","uri":"/posts/2021-03-29-word-auto-sequence-number/"},{"categories":["微软"],"content":"宏命令处理 （别有恐惧心理，不难） 打开word文档，按下快捷键Alt+F8，在“宏名”栏中输入dao“编号转换为文本”，这是给它起个名字，然后点击“创建” 在新打开的窗口上，你会看到光标在闪烁，把下面这4行内容复制粘贴到此 Dim kgslist As List For Each kgslist In ActiveDocument.Lists kgslist.ConvertNumbersToText Next 然后按下快捷键Alt+Q（或者，点击左上角“文件”——“关闭并返回到Microsoft Word”），回到word界面。 光标定位在除了自动编号以外的任意位置，然后按下Alt+F8，选中“编号转换为文本”（选中后底色为蓝色），再点击“运行”。 这就完成了，自动编号就成了可以编辑的文本（真实的文字）了。 ","date":"2021-03-29","objectID":"/posts/2021-03-29-word-auto-sequence-number/:1:0","tags":["word"],"title":"把word文档里自动序号转为文本","uri":"/posts/2021-03-29-word-auto-sequence-number/"},{"categories":["随笔"],"content":"1 每个节日都有纪念的意义，春节尤甚。 春节回家的脚步越来越迟，从年夜开始，到大年初五初六，日子开始平凡简单，所有的仪式在变淡，我们在成长，每一年的心境都在发生着变化，我们都不再是小时候穿着新衣服，拿着塑料枪到处跑到处放炮仗的小孩了，我们长成了大人模样，在变得更自由的同时也更加不自由了，我们终于有能力做我们小时候不能做的事了却也发现我们还有更多的事做不了。 周围的很多同龄人的子女已经和我们曾经的童年一起在奔跑了，而我们仅留那些渐行渐远的记忆偶尔缅怀。 每年春节总是会回忆一些东西，有美好的也有不愉快的。过去和未来的时间线在春节交汇。 春节，一年下来最隆重的节日，喜庆热闹，亲人团圆，张灯结彩，喜帖春联，祝福声声入耳。小时候有小时候的热闹，长大有长大的热闹，这热闹永不会过时。年味只是在变化，不会消失。 记起小时候的春节，总是伴随着忙碌，农村里的农忙， 帮家里干活，在年底时分格外典型，唯一空闲的两天是除夕和年初一。 ","date":"2019-02-11","objectID":"/posts/2019-02-11-village-history/:0:1","tags":["随笔"],"title":"一个村庄的往事","uri":"/posts/2019-02-11-village-history/"},{"categories":["随笔"],"content":"2 在我村，务农的经济作物–姜薯，是根茎植物，形似山药，味道独特，是我们这一带地区煲汤煮汤圆的首选特产之物。 姜薯临近过年时节采挖，削皮，到附近乡镇贩卖，是一个农民一年来劳作的收入来源之首。这种经济作物，承担了一个农民所有的期盼。 姜薯 村里头水稻种植，一年两季，所种多是基于自给自足，即便有盈余，卖得收入也是微乎其微，而姜薯则不同，它一年一熟，一年的种植管理耗时耗力，冬季收获，贩卖市场价格每斤从五到二三十元不等，是收入大头，基本代表了整年的收入。 所以，村里农民打招呼的惯常方式，今年你家的姜薯收成如何？个头大不？黑皮不？今年市场行情如何？价格卖得高不？然而，采挖姜薯的时节，又是格外辛苦和忙碌的，全家动员，从早到晚，一刻不得闲。 姜薯生在土里，是藤蔓植物，种植的时候是垒成一畦一畦的，畦上插上木枝或竹棍供其攀附。 采挖时，先割断藤头，拔除木枝竹棍，然后用锄头掀翻畦土将其挖出，此时需要格外注意，避免挖断，个头大的一般长得很深，挖出来后，还要去土，除细根，折开旁支斜逸小根茎，大个头的品相好的到时直接带皮卖，小个头的就要洗干净削皮了，削皮就意味着泡水了。所以小时候很讨厌冬天，对过年也是又爱又恨。 冬天一来，削姜薯是最烦的，双手在水里一泡就要泡半天，天气冷的时候尤其生厌。 父母更辛苦， 每天凌晨两点多就要出门，开摩托车到几十上百公里开外的乡镇去赶集，走街串巷散装贩卖，俗称拆卖，还有一种模式直接到县区市场一整筐叫价一次性出售，俗称推卖，一般而言，个头大品相好看的一般拆卖所得更多，然更辛苦，走街串巷，费时费力，而个头小品相不好的一般都去推卖，价格较低，不过省时间，一次性卖出。 这两种售卖模式多年来未曾改变。一般父母卖完后回来继续开挖，准备第二天开卖的。 然而如此辛苦下来，靠贩卖姜薯所得，一个农民一般一年的收入基本在1~4万区间里（此数据以种植的量为计算依据），而这还是总收入，未扣除农药化肥等各种管理成本。 于我而言，这种忙碌的冬天在我高三那年戛然而止。 去皮的姜薯 姜薯鸡蛋羹 ","date":"2019-02-11","objectID":"/posts/2019-02-11-village-history/:0:2","tags":["随笔"],"title":"一个村庄的往事","uri":"/posts/2019-02-11-village-history/"},{"categories":["随笔"],"content":"3 农田的活，除了姜薯之外，还有水稻种植，插秧也是需要帮忙的，小孩子干活总是不本分，不按规矩，有趣和好玩是第一要素，而大人总是实用为主，他们基本从左到右一块块完整插完，而我们小孩子，总要插出一朵花来，将所插秧的区域搞出个形状来。 此时若有个直升飞机，从天空俯瞰就会看到各种充满浓厚艺术的气息的作品，然而这时候总免不了被大人呵斥，艺术细胞就这样被无情的抹杀了。 收割水稻的时候也是如此，总是喜欢搞个形状出来。 大人与小孩的世界观不同在这里便得到了充分的体现，小孩以有趣好玩为主，大人务实，追求结果而不管过程。 在大人眼里，这些过程已经枯燥乏味无趣辛苦，但是又不得不做。所以天气炎热农忙时，他们会感叹会咒骂，这天气毒得很呐。他们总在感慨。 每个人的成长都有隶属于他的独特的印记，有些印记足以伴随人的一生。 小时候很多记忆都和农田有关系，除了上学，就是田野。 而实际，我做过的农活其实都很边缘化，都是作为一个孩子的打下手，我也从不知一些核心作业的操作。 一方面是大人从来没把这些教给我们孩子，在他们眼里我们始终都只是孩子，核心的东西教给我们做也不放心，他们专精的作物种植方式方法，从没放手给我们做过。 回过头想，这也是他们做的不够好的一个地方，作为一个农民他们的教育思想是有所欠缺的，没给我们足够的空间和自由去培养去锻炼去学习这些知识。 当然，他们也根本不希望子女承袭旧业，以后继续务农，他们已经是吃了没文化的亏。 作为小农的他们已经深感务农的艰辛和劳累，他们更多的是希望子女好好读书。 以后出去外面谋个好工作，可以坐办公室，不用回村务农，不用干体力活，不用日晒雨淋，他们深觉农民这个桎梏已经将他们束缚得太深太紧，他们已经无力挣扎，靠脑吃饭于他们而言更有面子，以后发展在外买房买车，也算是极有出息了。 另一方面，我们不知务农的要点，还在于年龄小，没有自主学习的意识，大人没有教，我们也没有主动去学习认知，而只是把繁重的劳作当成一种艰辛的体力劳动而深加排斥。 这种感知也是来源于大人的耳读目染，他们总是以此种艰苦来鞭笞子女用功读书，否则以后便要作此劳活，在他们眼中也从不会换种观念愉快一点的享受劳作的过程，他们总是觉得这太累了，太辛苦了，这是他们最传统最朴素的教育观和认知观。 当然在村子里，还有一个需要说明的是，由于村子稍偏，丘峦迭起，田地并非平原，而是高低错落，各家各户分得一两块田地，或是自己再额外家庭联产承包部分田地，都属小农经济，除了部分雇佣养牛人家以牛犁地之外，基本全都是手工劳作，没有任何机械化设备。 大约是2010以后，部分稍平地段的田地的农民开始租赁一些收割机械开始收割庄稼，而此时村子务农的人已经逐渐在减少，往后整个农村的经济还将发生变化。 ","date":"2019-02-11","objectID":"/posts/2019-02-11-village-history/:0:3","tags":["随笔"],"title":"一个村庄的往事","uri":"/posts/2019-02-11-village-history/"},{"categories":["随笔"],"content":"3 孩童时期除了下田，还有就是上山。 村子除了水稻姜薯两种农作物经济外，村子四面环山，丘陵众多，气候适宜，雨水丰沛，草木欣荣。 因地制宜，孕育了另一大产业，果林种植业，在七八十年代的开垦种植风潮下，环山皆果树也，包括杨梅、橄榄、柿子、番石榴、油柑子、梅子、柑桔等，尤以前三种数量最著，其余较少。 杨梅 橄榄 柿子 每家每户分得一部分山林地段，各自管理，每年给村政府缴纳一定果林税款。 最具代表性的水果–杨梅，而杨梅里的帝王品种–乌酥杨梅，据说便是源于此村，虽偏居一隅，也是闻名遐迩。杨梅营养价值较高，是天然的绿色食品，极少或没有被大气污染，栽培管理粗放，病虫危害少，具有绿色无公害水果之美誉。 杨梅种植受地域影响极大，不同地区所种口感相去甚远，而村子因这独特的地理条件，产出的杨梅口感极佳，果汁饱满，甜度极高，尤以乌酥杨梅为极品，价格最贵。 杨梅成熟时节，早晨五六点上山采摘的村民络绎不绝，小学学校甚至将上学时间从八点推迟至九点上课，方便孩子帮忙采摘，此为村子一大特色。 小时候，杨梅品种还有十余种，有红梅、白梅、乌梅、甜梅等等，而随着时日推移，趋利使然，种植嫁接品种向乌酥为首的几个名贵品种聚集，一些品种也开始消逝，此为遗憾一。 橄榄是第二大水果，品种也有许多，果树高大，果实坚硬，一到采摘时节也是举家而出，携带长短竹竿，上树敲打，落地而拾之。 小时候我们有时还会去拾掇别人采摘完的橄榄树，上树找其漏网之鱼，因为橄榄果实和枝叶都是绿色，较难辨别，别人采摘完后，可能还有极少遗漏的。 橄榄的贩卖，基本靠村里头一两家集中采购，价格低廉，往往只有一两块每斤，这两家收购商自行联系外面厂家，再将收购来的橄榄卖出，这么多年来，竟然没有引进有外面大厂直接进村收购，甚至有些年头村里都没人收购，导致很多山上橄榄都没人采摘。 当然，夏季采摘时节的橄榄还是较为稚嫩，橄榄果实可在树上保留生长一年多，秋冬果实更饱满，口味也更佳，此时会有部分人再采摘和姜薯一道在外散装贩卖。 记得初中，学校位于山脚下，无围墙，趁下课之余憩，时常和三五好友奔跑上山，采掇橄榄，我们专挑树下灌木丛生之果树，标志此树无人管理或是采拾过，可认无主，当时山林已经陆续有人弃而不管，不采白不采。 那时采拾也非常简单，找一木棍或石块，往枝繁叶茂处砸，震动波足以使果实纷纷坠落，多的如雨下，少的零星几个，非常爽快，采完回去继续上课，现在想来有点皮。 包括杨梅在内，果业贩卖都和姜薯类似，依然是个体经营，周边乡镇摆摊贩卖，始终无法形成产业规模，此为遗憾二，实大遗憾，究其原因，私以为是缺乏一道统筹引领之力量，它按理应当是村政府，抑或是一批有远见卓识之领头羊，有所眼光，有所号召力。 然这股量一直缺乏，乃至隔壁村有人带头发展农家乐旅游的果林模式之后，村子果林业依然是散兵游勇，实难成军，我惊讶的是至今村子竟仍没形成一条完整具有规模性的果业供应链，集群效应几乎为零，令人慨叹。 当然，个中原因可能还包括果林业已经不再受人重视，从初中时代采摘橄榄的景况可见端倪，很多人已经陆续放弃山林，转而向外务工发展。 ","date":"2019-02-11","objectID":"/posts/2019-02-11-village-history/:0:4","tags":["随笔"],"title":"一个村庄的往事","uri":"/posts/2019-02-11-village-history/"},{"categories":["随笔"],"content":"4 孩童的生活，基本可分三大块，农活、玩、上学。讲完了农活，接下去的讲讲玩乐和读书的故事，详见下文。活，基本可分三大块，农活、玩、上学。讲完了农活，接下去的讲讲玩乐和读书的故事。 孩童的玩乐非常丰富，我们中绝大多数人拥有着自身并未察觉到的广阔自由度，成天奔跑于天地之间，仔细想来，这生活中的诸多场景，竟和宫崎骏的电影《龙猫》有诸多相似之处，而电影中的龙猫此等意象，也是和我们脑海中幻想的神怪有异曲同工之妙。 水是生命之源，孩童的本真怎么会少了水的陪伴呢，他们总是喜欢与水相伴，这其间有两大乐趣，一是抓鱼钓鱼，二是戏水游泳。 村里有水塘，不过在我童年时期很多水塘已经消失了，要么变脏，要么被填埋，基本已经没有可以下水的干净和安全的水塘了。 有一个例外的是小学旁边的水塘，原来那里是一片农田，因为地势低洼，四边高，中间低，在一场不见经传的大雨中，一下子成了淹了成了池塘，因为排水堵塞，这个池塘就拥有了岁月年轮，直到最近几年，被填埋，盖成了楼房，它完整的存在了童年的记忆里。 池塘无主，父亲曾和一些人一起在里面放养了鱼苗，记忆中两三年后，他们大人集体去撒过一次网大捕捞，印象深刻的是当时靠近岸边的那一段渔网抖得厉害，预计应该是一条大鱼，我们小孩子格外兴奋，急得不行，恨不得想赶紧拉上来，不过大人们耐心得很，就是不让我们动，我们会拿一些小石子去投射，但都被大人们严厉的制止。 而经过漫长的一两个小时等待，收网的时候却发现抖动那里已经没有了大鱼，估计是跑了，真是倍感失望，心里埋怨这大人们做事不行，最终总体收获也甚少。 而后，好像便没再去捕捞了。而村里还有很多人去小捕捞，私下里，在晚上，深夜里的时光悄无声息的上演着。 白天，我们平时时常会去钓鱼，摸虾，池塘里大鱼可能没有多少，但是种类还是蛮多的，小虾小蟹都有，石壁边还有钉螺。 钉螺 有一次晚上，我们几个人在那里摸钉螺，钉螺和田螺一样，是一道餐桌上的美食，它形状像一颗钉子，尾部螺旋细长，它们就盘在池边的一排石头边，这排石头是别人早先打地基垒起来的，当时一手拿手电筒，一首用手在摸，一不小心就把手电筒伸到了水里去了，当你的视线已经凝聚在钉螺上的时候，你另一只手上的手电筒在空气和水之间已经模糊了界限。 有段时间，池塘里还有一种鱼，靠近低洼水草处颇多，鱼身红蓝条纹相间，非常漂亮，生命里极强。 当时喂养是发现它们喜食蚊虫，到而今，方才查到原来这种鱼叫盖斑斗鱼，又称中国斗鱼，杂食性，以浮游动物、水栖昆虫、蚊虫虫卵及藻类为主，原产我国海南，两广，福建江浙和台湾一带，因鱼身色彩鲜艳被广泛用做观赏鱼，是继金鱼后第二种被传入西方的观赏鱼，也是第1种被带到欧洲并且能够成功进行人工养殖的淡水热带鱼，深受西方人喜爱，被西方人称为天堂鱼。 这种鱼身长最长6-7厘米。当时在池塘边水草丰茂之处，捕捉极其容易。 只需拿一个黑色塑料袋子，淹没在水草旁边，隔一小会，再捞起来，就会发现里面已经有一两条跑进去了，他们不喜光，喜欢躲在阴暗的地方，作为小孩子的我们竟然很直接的找到了他们的习性。 我还记得当时抓了一条，直接握在手心里，没找到东西装，就直接拿回家了，走了一公里多路回到家，放到水里，它竟然还精神活现的，让我吃惊。 后面养在一个舀水的勺子里，在家里放了十几天，也没喂食过任何东西，竟然都没死，后面不想养了，就把它弄没了。 想来那时年少，不懂得珍惜，应该好好养着的吖。 那段时间过后，池塘里的斗鱼就基本消失了，后面极少见了。 在初中时期，意外在田里一条小沟渠里发现了盖斑斗鱼，异常兴奋，虽然个头偏小，但是童年的熟悉的回忆还在，况且，这种鱼已经极少见了，养鱼之心顿起，又捕捉了一些，专门买了一个圆形的腌制咸菜的小玻璃缸养着。 然而这些小个头野性十足，生性好斗，养多条的时候经常会发现他们打架，还有经常会跃出水面，掉落在地板上，待到回家的时候已经发现它成鱼干了。 那段时间养得都不长久。现在了解了才知，斗鱼生性好斗，其名便因此而来，而且喜暗不喜光，估计越出水面是因为换了新环境不适应，还有太亮的缘故，甚是遗憾。 盖斑斗鱼 鱼种在变化，水塘也在变化，但是这个水塘和我们的童年紧紧捆绑在了一起，水塘几个边，除了石壁一面，还有浅滩一面，还有一条活水从山脚下流进，活水经过一块田，我们最开始的时候会在这个田沟里抓鱼，抓螃蟹。 当时怎么抓的呢，我们会在田沟里找一处积水较多的位置，然后把前后堵住，不让水进来，不让水出去，然后再用鞋子把积水推舀掉，剩下底下的淤泥处就都是各种泥鳅小鱼小虾小蟹和其他小生物了。 有一阵子还在田边抓青蛙，抓了然后用线绑在腿上，牵着他们玩耍。 每到春天，水塘边上的小鱼小虾就会非常多，还有很多蝌蚪，我们在浅滩处，用两只手罩住一小块水域，慢慢往岸边推，水逐渐流失，剩下的很多小鱼小虾和蝌蚪就会在你的两只手臂之间了，成了你的囊中之物。 我们养蝌蚪，会把蝌蚪慢慢的养成了青蛙，他们变态发育的过程，我们全都经历过，小时候，每隔几天，就会看着蝌蚪的变化，从一条尾巴，到长出两条后腿，到长出两条前腿，到尾巴慢慢消失然后他们就离开了水，整个过程都非常有趣。 我们还常常过去钓鱼，所有的钓竿都是自己做的，用一根小竹棍，弄一个丝线，在绑个塑料泡沫做鱼漂，鱼钩有时候会自己买，有时候会自己做，拿一根直钉折弯即可，这种没有倒刺，钓到鱼容易挣脱。 最简单的鱼钩都不用做，直接用绳子绑一小截蚯蚓，打个结即可，蚯蚓是最好的饵料，鱼直接把蚯蚓带绳结吃进去了，轻轻一拉小鱼就会因为绳结卡在肚里就被拉上来了，当然这种适合比较小的鱼。 钓鱼和钓虾还有区别，钓鱼时鱼漂有动静后，等待一会儿就要快速往上拉起鱼竿，而钓虾不同，要往左或往右拉起鱼杆，这样才能钓住它。 这个水塘水不算脏，夏天的时候经常有人在水里游泳，不过作为听话的好孩子，我谨记着大人的教诲，不要去山塘水库玩水，因为出过好几条人命。 仅有的一次，和几个小伙伴下过水，当时小，胆子也小，小心翼翼的，也怕被别人看到，我们脱了衣服，一步步从浅水区往深水区走，池塘底下都是沙子，没有泥浆，脚不会深陷下去，我就慢慢走，一直走到水没到脖子那里，水压压迫着我的肺部，我感觉呼吸有点困难，内心又很害怕，距离岸边有点越远就越没安全感，在水里踮了踮脚尖，身子就轻轻的往上飘了一下，感觉蛮神奇的，然后走了几下就上来了。 现在想来，当时若是有个熟手带着，将是一个学游泳的多好的机会，天时地利，可以在浅水洼处练习，也不至于那么害怕。 那也是我唯一一次下过这个水塘。后来水塘每年都在变化，变脏变差，直至变没了。 除了这个水塘，便再无一个如此好玩如此和我们童年走得亲近的水塘了。 其他私人的鱼塘很难亲近。我们还去过去水库钓鱼，水库很大，很陌生，很没安全感，有个巨大的大坝。 因为常常传言水库里有水猴，也就是常说的水鬼，会让小孩产生畏惧之心，水库出过好几条人命，都是小孩溺水而亡，水鬼的传说估计和大人们威吓小孩避免他们靠近有关。 我听过一个版本的水猴传说是这样的，水猴长期生长在水下，不会轻易露出水面，极少有人看到，当你在附近游泳的时候，它就会把拉住你的脚，把你往水底下扯， 最后把你溺亡。 听得小时候的我们心惊胆颤。 当然，像我等好孩子，是不会去水库戏水的，这等安全意识是有的。我们只是去钓鱼，在我们钓鱼的岸边，有个水闸在放水，水流哗哗的响，声音充斥着耳膜。 记忆中就一次在水库里钓过鱼，收获还是蛮大的，其余几次都是在大坝下面水流下来的水塘河沟处钓。 水库水面广阔，三面环山，一面是大坝，我们在水闸下面的大坝，看着远处的水面，一阵幽深的感觉，让人内心寒凉，极远处的水面，有一两只水鸟，看不清，让人浮想联翩，我总是想到水猴的故事。 加之哗哗的水声，让我在水库旁边觉得很是惊恐，一点安全感也没有。这座水库建了好几十年了，听闻当年刚建的时候，还挖出了很多墓地。 这些大大小小的因素，加深了作为小孩的我内心的恐惧。 ","date":"2019-02-11","objectID":"/posts/2019-02-11-village-history/:0:5","tags":["随笔"],"title":"一个村庄的往事","uri":"/posts/2019-02-11-village-history/"},{"categories":["随笔"],"content":"5 村里还有几个山脚下的水潭，印象深刻的一个在一丛巨石群下，石头非常大，堆叠在一起，我们经常在上面爬，石头之间有很多缝，有些深不见底，有时候我们也会去钻缝，但越到下面，越暗，也就越惊恐，我们往往不敢爬太深，在这巨石群下是淙淙的流水，流水在石群脚下冲出来了一个水潭，十来平米见方。 水潭有深有浅，最深的那个位置也就刚好没过当时我的头，大小一平米左右大小，经常有小孩子在这里戏水，这里也有我的回忆。 小学五六年级的时候，我和几个小伙伴也经常在这边戏水，当时差一点就学会了游泳，为什么说差一点呢，因为就差换气了，我们整个人已经学会趴着漂浮在水面上了，然后会伸手滑动，即使不滑动手，身子也不会沉下去。 最开始我扑腾扑腾着，在突然一刻双脚成功离地了，身子悬浮了一会儿，那个时刻我兴奋的和大家宣布我游起来了，大伙儿也开始一起扑腾，当时还没一个会游泳，最终也没有一个真正学会游泳，因为还没等我们真正学会的时候这个水潭已经变了样，这是后话。 当时扑腾了一阵子，大伙都发现脚能离地了，然后慢慢的，身子就起来了，慢慢的，脚不用扑腾了身子也能起来了，慢慢的，手也不用扑腾了，整个人只要趴着就浮在水面，然后我们开始比游快了，但是没一个人学会换气，因为也没有其他人指导。 趴着可以了，那就学着躺在水面上，然而躺的话我每次耳朵都会进水，后面索性就没练习了。在那个暑假，有一半的阴凉是来自那个水潭，我们几个人常常会相约过去戏水玩耍，打水战，练习游水，有时还会在那些石头上烧烤，有时还会去边山脚下摘果子吃，那可真是一段快乐而难忘的时光。 然而也就是在那一年，下了一场大暴雨，山上的泥沙裹挟而下，水潭一下子浅至及膝，难再戏水。 初中后，一群人各奔东西，求学之地不在相同。水潭的时光成了回忆。 两年后，回忆过往，我和一个伙伴前往水潭，想再戏一次水，我们都已不是小屁孩了，偷偷摸摸怕被别人发现，颇怀一股小大人的模样。 水深了一些，也只到大腿处，也许是泥沙被时间冲掉了一些，也是是我们长高了。我们扑腾了一小会，伙伴就上岸了，穿上了衣服，一脸失落，那一刻，我瞬间体会到了他的心情，那些童时的戏水的欢乐，现在再也找不回了，时间不再，心境也不再，白马过隙，白云苍狗。 水潭在山脚下，那一面都是山，实际上，村子周边都是山，丘峦迭起，虽然都不高，但重峦叠嶂，把村子围蔽了起来，挡住了我们如炬的目光，小时候看着山，想着山外面是什么，到课本学到王家新的诗《在山的那边》，深深感叹。当时登上一边的小山顶，想看那边的世界，有片山的那边，还是山，山是什么东西，都已经没有了概念。 而在我家野地的那一片山另一面，确是另一片世界，那是那边的连绵的小镇，在朦朦的雾霭中与天际线融为一体，多年以后我才知道那不是雾气，是霾，我在山顶时极目远眺，既觉得自己如此渺小，又觉得远方如此陌生，那彷佛是另一个世界，而当我有一天在那边穿行时，我依然无法把那种远眺的陌生感和我脚下的城镇联系起来，那时还小，竟然隐约于无知无觉中领悟到了我们看到的世界并非真实。 俗话说三山六海一分田，作为孩童的我整天与山与田为伴，就差见海了，虽然所在的地市临海，但村子不靠海，而我长到高中时期，基本都没见过海，这让我对海充满了向往，一直想象着有朝一日能目睹和体验电视屏幕里那抹清澈与蔚蓝，这种期待一直充盈在我心间。 即便至今已近看见几个海滩和海港，依然没见到那抹清澈与蔚蓝，每次都遇天气阴沉，海水浊黄浅绿，简直和普通池塘一个模样，大失所望，完全不是期待中想象的模样，我想在三亚应该能满足这个期待，能见到心中的这抹纯净的澄澈的蓝。 ","date":"2019-02-11","objectID":"/posts/2019-02-11-village-history/:0:6","tags":["随笔"],"title":"一个村庄的往事","uri":"/posts/2019-02-11-village-history/"},{"categories":["随笔"],"content":"6 童时的乐趣，除了戏水钓鱼，爬山，摘果子外，还经常上山烤地瓜，打野战，捉迷藏，相比城里人的孩童生涯，着实还是丰富多彩有趣得多了，而且从小便是自由之身，不受管束，只要不涉及生命危险之事，大人不会多加约束，他们总有他们的事忙，只要记得归家即可，想来农村的天地如此广阔，远大于城里的方寸空间。 当然，很多东西时不可比的，城里有城里的好处，各类教育资源乃至其他服务资源都享有绝对的优势。 在村子里，多数父母的教育是有所缺失的，包括我自身父母在内。 我们总会在得到某些东西的同时又失去某些东西。 《杀死一只知更鸟》中阿迪克斯的教育方式是深得我心的，既有给孩子足够的空间和时间去玩，又能在大原则上循循善诱尊尊教导，有正确的价值观指引，而在小方向又给孩子充分的自由和自主。 而回过头来，我从小学一路读书到大学，其实和周围的环境和周围的人有很大的关系。 村子人多，传统观念下子女一群群一簇簇，计划生育也没能扼住人们生孩的决心，在周边乡镇发达的手工业表象中大人们也充分利用了人口的红利，村里大多数人没读完初中就辍学外出务工了，女孩子甚至相当一部分的连小学都没读完，就被父母安排到隔壁镇上的工厂打工，每天的生活就囿于这方寸之间。村子里重视教育的父母有，但比例远不够，尤其是对女孩，非常不友好。 虽说大人对读书人都还比较尊敬，但是在子女教育的引导上是极度欠缺的。 在小学读书成绩比较差的，孩子本身信心已经受挫，此时更多的需要是鼓励和关怀，而大多数父母此时可能已是编绳在手，恨铁不成钢，一棒子打死，给到孩子更大的心理打击。 当孩子产生自我怀疑之后，便会觉得自己不是读书的料，产生厌学情绪。大人们已经习惯这样一种教条主义，从小时候读书成绩好的就会一直好下去，而太差的则在读书这方面已经走不通，不再抱有希望，他们不知道的是，在子女心智未真正开启之时，一切都断言都为时尚早，一般而言在十四五岁时正确认识自己，奋发而上，是可以弥补以前落下的知识的，在大学之前，基本都还没到拼智力的时候。 况且，除了纵向发展，还有很多横向发展的可能，若没有开明的父母，这些方面基本不会有人去培养。 而一个人的成长总是变化的，士别三日，当刮目相看，永远不能以静止的眼光去看待一个人，所以，不能理所当人的以一个人过去的样子来判断他的当下，更不能去判断他的未来。只要一个人能接纳过去，并在不断创造未来的时候，这个人就是值得尊敬的。 村子里读书，有个很大的问题，就是老师和环境的影响非常大，有没有好老师，有没有好环境，基本会影响孩子的往后的发展，这个环境指的更多是周围的同学的环境，由于管教缺乏，农村的熊孩子非常多，小帮派还有平常的打架都是存在的，每个班总有那么几个人，捣乱课堂纪律，甚至敢和外来老师直接叫板，一般不惹他们他们也不会主动找你滋事，一旦被这些人影响或者成为他们一员，学习生活必然受到严重牵连。现在了解到城市中很多学校有霸凌的现象，回想来以前小学环境还算比较好，霸凌还算不上，顶多只是欺压。 初中的环境就很差，教学环境和师资皆是如此，学生叛逆期，加上老师大都是外来的，言语不通，竟然常有老师被学生欺负，学生总是会用本地话辱骂他们，他们完全听不懂，要镇住他们得有些手段才行，事实上也没多少个老师能真正hold得住这些学生，这里本来地理就偏，环境差，老师待遇也非常低，还经常要受学生气，因此来这的老师走掉了不少，师资是严重匮乏的。 初中三年，没有美术课，没有音乐课，只有考试的语文数学英语政治历史化学，甚至连体育课都没有，而一个老师至少要身兼两门课及以上，每门课至少带两个班。 学校是这一带七个山村中在我升初中前一年以前仅有的一所中学，周边村子的人初中基本在这里读，一座3层的教学楼孤零零的坐落在山脚下，老师也住在里面，连个校门都没有，没有围墙，像样的操场也没有，唯一一个篮球场是泥地的，非常寒碜，当然却也非常自由，我曾戏谑称是地球最大的中学，因为没有围墙的它边界可以无限延伸。 我小学只有本村的学生，每个年级约有3个班约160人左右，其他村平均也有1-2个班的规模，到初一七个村的学生加起来竟也只有3个班160人左右，而初二凑成2个班，初三凑成1个班80人左右，足以见流失人员之严重。 当然，在我升初中前一年隔壁村有私人投建了一个新初中，师资环境各方面都非常优越，相当一批成绩好的当时都直接流到那边就读了，我初三那年也过去了。 当时走的非常突然，以至于没能和村里初中这边的老师好好支应一声，这一直以来让我深觉内心有愧，当时这边的几个主任老师对我非常好，把我当成好苗子培养寄予厚望，而我突然走得无声无息，成了永远一个心结。 而后升上县城高中，而后来到广州上大学，期间种种，在经历的过程都内心都面临很大压力，现在回过头来，一切又都成了过眼烟云，仿佛应了那句话，该来的总会来，该走的总会走，一切都会过去。 ","date":"2019-02-11","objectID":"/posts/2019-02-11-village-history/:0:7","tags":["随笔"],"title":"一个村庄的往事","uri":"/posts/2019-02-11-village-history/"},{"categories":["随笔"],"content":"7 大学毕业那年，各种条件下，我和我哥决定盖个楼房，十几平的老房子着实已不成样子，逼仄压抑，它的年龄是我的三倍长，每每节日回家落脚都让我倍觉心酸，而我打一出生就在此，二十来年目睹周边所有邻居迁居新楼。 父亲没能给我们实现盖楼的愿望，他把这个任务交给了我们，很小的时候他说过，想要什么东西你们自己去争取，他给了我们最开始遮风避雨的地方，生活最终压倒了他。 住上新楼，拥有自己独立的房间是我从小到大日思夜想的一个愿望或者说梦想之一，它数千万次出现在我的脑海里，数千万次出现在我的梦里，在我每次回家时都格外强烈。 而这个盖房的决定，一开始就伴随着剪不断的地缘纠纷和利益纠葛，期间波折，难以言表。我们举债建设，四下无亲，人情冷暖，尽皆体验，感受着成人世界的虚伪做作，嘴里一套实际一套，真令人作呕。 在房子还是还是红砖主体的时候，我已然梦见了盖成后住进去的情状，一时间竟觉很不真实。 最终2层平房落成，因为赶工，有些地方存在瑕疵。后面装修全由我哥折腾，从墙到挂饰到吧台，他楞是搞成了欧式风格，这种风格在整个村子里绝无仅有的。 五十来平米的小房最终搞出了各式花样，也耗费了我们好多时光和精力，很多东西都是自己亲自动手弄的。终于住进去那几晚内心感慨良多，百感交集。 通道吧台 在搬进新家一年来，我除了年节回过几次外，其余时间都在广州，而我依然时常做梦，而现在梦到的是我们在村里盖了两处新楼，这个梦反复出现，实在诡异。 今年过年，在新房里，我有时整夜整夜睡不着，想起那些受过的屈辱，那些恶毒的人心，常常难以平愤。我已经知道，我将来不会属于这里。但是现在，这里是我人生是我梦想的一个结点，它连接了我的过去和未来，有着深远的意义。 客厅 ","date":"2019-02-11","objectID":"/posts/2019-02-11-village-history/:0:8","tags":["随笔"],"title":"一个村庄的往事","uri":"/posts/2019-02-11-village-history/"},{"categories":["随笔"],"content":"8 村子在逐渐远去，时间让一切慢慢都发生了变化，包括世道，包括人心。 想起初中那会儿，信誓旦旦的想和周边的几个好朋友说，以后我们走出去了，可都一定要回来建设村子。 那时可真年轻啊。 （完） 首发于公众号 工具客栈 ","date":"2019-02-11","objectID":"/posts/2019-02-11-village-history/:0:9","tags":["随笔"],"title":"一个村庄的往事","uri":"/posts/2019-02-11-village-history/"},{"categories":["读书"],"content":"读《项塔兰》","date":"2018-12-05","objectID":"/posts/2018-12-05-xiangtalan-reading-notes/","tags":["读书"],"title":"一场孟买的惊心动魄流亡之旅，一本爱的布道书","uri":"/posts/2018-12-05-xiangtalan-reading-notes/"},{"categories":["读书"],"content":"项塔兰 项塔兰2·山之影 读书笔记： 继《项塔兰》之后，此书据介绍说是作者耗时十年完成的心血续篇，第一部初版当时于2003年面世，而中文版2009年才出版，这部续篇2005年底面世，历时两年翻译，2018年7月中文版推出。而我在机缘巧合之下知道了并于9月份借到了此书，也是充满了期待。 回想起当时读第一部时，那种精彩与震撼，久久萦绕在心头。此书是作者以他自己真实经历为蓝本而进行创作的一部小说，第一人称讲述作者林在印度的流亡岁月，林本是澳大利亚最年轻的大学教授，因家庭破裂染上毒瘾进而去抢劫银行，被抓后越狱逃亡印度孟买，从此开始了在印度传奇故事，入住贫民窟，加入黑帮，伪造护照，走私，入狱，打架等一系列精彩而曲折的经历，关于毒品，也关于救赎，关于黑暗，也关于善良，关于爱情，也关于自由，书中描绘了形形色色的人，每个人都个性鲜明，立体感极强。 此书续篇，总体而言，情节精彩程度不如第一部，第一部的情节更加跌宕起伏，故事更加宏大，前半部平民窟故事，后半部黑帮故事，第二部更多的是林和周围人的故事，林有了更多自己的生活，已经游离在黑帮边缘。第一部塑造的黑帮领袖哈德拜，形象非常伟岸，影响力巨大，其领导的黑帮团结有序，力量强大，以至于第一部在哈德拜过世后，第二部中的后来继任者因能力和心性的不足，更是破坏了哈德拜的黑帮规矩，领导的黑帮大不如前，更多的是靠已故的哈德拜的威望余荫而存。第二部的哲思内容更多于第一部，里面有更多关于哲学的探讨，人性的探讨，第一部时和哈德拜讨论，第二部已经升级到了和哈德拜老师伊得里斯探讨和辩论，宇宙，爱，自由，意志，很多抽象而虚无缥缈的东西，在这个导师面带平和的微笑中脱口而出，娓娓道来。虽是认可一些，但我并未觉得导师说的所有金句都是那么深刻和充满力量，因为有些说得更加虚无缥缈，让人很难理解。书中最后一页，又提到了伊得里斯的一句话：一颗心若是充满贪婪、骄傲和憎恨，就不得自由。 这其实可做全书的总结：自由，一个灵魂的修炼。 本书其实还是一本爱的布道书。虽然表面黑帮与爱似是个矛盾的对立面。 林身在黑帮，但是身上依然充满着善良的秉性，他做着伪造护照的工作，有很多肝胆相照的兄弟，有情有义，充满血型，做事有原则，当然，对待敌人也绝不手软。他乐于助人，对兄弟仗义，对落难的陌生人也会伸出援手。他一心宣扬着爱，友情之爱，爱情之爱，亲情之爱。他内心从来都没被怨恨充满，即便他遭人陷害，遭人毒打。他可能会报复，但他的内心也依然是平静的，没有怨恨的。他时刻在审视自己，在凝思，他讲述着爱的种种，他讲述着周遭的人，他讲述周遭的世界，将他们凝结成哲思的零光片羽。 他虽已是自由身，但依然时时刻刻担心着被捕，这些逃亡岁月，他常常夜不能寐，常常从噩梦中惊醒。他对过去的绅士大盗行径忏悔，他用爱救赎自己，内心良善，他早已妻离子散，无亲故。他渴望爱情，追求爱情，对卡拉至情至性，矢志不渝。卡拉是个集美貌与智慧于一体的充满魅力和传奇的谜一样的女人，林的心被她牵动着，他猜不透她所思所想，在她面前都觉得卑微，卡拉也喜欢他，爱他。 第一部他和卡拉最后因为种种缘由没能在一起，他们有各自的事情要做。这一部中，他最终和卡拉还是走到了一起。开头，林和莉萨在一起，而卡拉则和一个富贾因利益各取所需结成的名义上的夫妻。林和卡拉都和莉萨关系很好的朋友。莉萨遭遇杀害之后，林和卡拉都非常伤心难过，对他们触动很大，而后种种谜团才开始解开，林爱莉萨，但他内心深处，依然深爱着卡拉，卡拉其实也深爱着林，她告诉了和富贾假夫妻的明细，她要利用富贾的钱财和名利重建贫民窟，富贾则要利用她对付兄弟姐妹对其遗产财富的觊觎，卡拉知悉莉萨种种不轨行径，因看不惯她这样欺瞒林，劝她离开林，莉萨是个有魅力的女人，她爱林，但同时也是个双性恋，她办画展，搞艺术，同时也毫不避讳和周遭人有肉体往来，即便和林是同个圈子，同桌吃饭，而只有林蒙在鼓里。林在做着黑帮的伪造证件事宜，莉萨在办她的画展和艺术事业，他们都没有过多干涉彼此的做的事，林也不会过问莉萨过多的私事。莉萨答应了卡拉，和林提出分开后不久，莉萨遇害，后查明凶手竟为富贾，他购买不纯毒品，意欲迷奸莉萨，结果莉萨因毒品吸食过量直接死亡。莉萨死亡之时恰好林外出为退帮派替其做事。卡拉对莉萨的死亡抱有愧疚，两人均深感沉痛。重遇卡拉后，林发现卡拉在他心中的神圣地位依然没有任何动摇，他依旧爱得深沉，一心想保护卡拉，想和她一起生活。富贾在卡拉离开后不久也遭遇政敌遇刺，卡拉随后办起了失爱事务所，林经营着自己走私业务，她答应和林一起住酒店，两人隔壁，中间一堵墙，如同横亘在卡拉心中的墙。后续又经历了帮派斗争引发的全城戒严，彼此相互关心的两人再次心贴心的在一起，水乳交融。他们上山找伊德里斯—他们的精神导师兼哲学导师，一起生活了三个月，卡拉此时才告知林她自从上次分别后她的所做所想，假婚姻，操持投资基金，失爱事务所的目的，重建贫民窟计划。在山上突遇帮派上山厮杀，林和卡拉协助导师守护山上资料，涉及一点牵连，当他们得知好兄弟阿卜杜拉以自己为诱饵自我牺牲来实现帮派易主时，悲痛万分。事件过后，他们俩下山回归孟买，开始他们真正一起的新生活。 林和卡拉的爱情主线是此书爱的主旋律，也可以说是林在孟买流亡岁月的心灵的归宿。**他们的爱，冷静，睿智，理性，深沉，也缠绵。**全然没有小资情调和庸脂俗粉的那种矫揉造作之感，这也是本书的基调凸显出的力量。当然书中的还夹带讲述了另外几对好友的爱情故事。 爱情只是其中一条主线，可以说，友情，或者说兄弟情，是书中另一条主线，与爱情并重。林喜欢很多人，并且和他们都成了很好的朋友，情同手足，比如阿卜杜拉，比如狄迪耶，还有很多很多，名字太难记了，黑帮中的，非黑帮的，他们有难，林出手援助，同样，林有难，他们也舍身相助。他们个性鲜明，各有特点，林喜欢他们身上的特质。 从小说的角度来说，对于这些人物的刻画，是出于小说笔法，都是有虚构的成分，但我是极喜欢作者的这种人物刻画，真是各有特色，性格鲜明，一时让我想到了古龙笔下的人物，有异曲同工之妙，每个人都有吸引你的特质，言谈有趣，让人欣赏。书中形形色色出现的人非常多，这些外国人名很难记，每个人都有他们发生的故事，有些人前面出场，中间我读着都忘了有这么个人，后面章节的故事又把他串了进来，各色人物都有关联，真是错综复杂，如果不专门厘清一下，真是理不清，而我顺着章节读，除了几个关键人物，其实也没有过多去整理各色的交错的人物。 除了人物塑造，我们再来看看作者的表达。两部书文风一致，起初我还担心第二部的翻译的风格会和第一部有出入，毕竟不是同一译者，第一部译者黄中宪，台湾人，第二部是柳筠，大陆人，然一读下来，发现人名乃至风格均沿袭第一部，读来如同一人译，酣畅淋漓。全书都是短句为主，文风简洁，短促有力，没有多余的修饰辞藻，行云流水般，短短几句话，便能把各种大场面，大事件，悉数描述得令人印象深刻，笔力渗透，真真入木三分。全书以人物对话居多，约占六至七程，各色人物，言语间，性格特点已跃然纸上。人物对话也是短句为主，毫无拖沓之感。这种文风，和阿城笔下的作品有些像。上面说到人物塑造和古龙笔下的人物有神似，但文风便不同了，古龙是作品是长短句交错，喜欢比喻，修辞，抒情色彩浓厚。而此书文风极简，却也依旧能抒情，每一章末处，基本都有作者的内心独白，哲思和领悟。他不是单纯地讲故事，他还在故事融入了感情，融入了爱，融入了智慧和思考。甚至第二部里，哲思部分的内容还有点偏多。 说完此书的文风表达，我们再来看看书中内容从侧面体现的东西，孟买，一座城市风貌和灵魂。两本书的故事基本都发生在孟买，这座城市充满包容性。这里集合了印度最富有的富人区和最贫穷的贫民区，他们一墙之隔；这里警察与黑帮并存，达到某种微妙的平衡；这里很多外国人在此定居或着流浪；这里很多圣人和洗礼者；这里很多教派和教徒。第一部中，林讲述了贫民窟的生活，每户人住几平方，晚上丈夫会睡在外面露天小巷边，以便屋里腾出位置给妻孩睡。成群的老鼠过境是怎样壮观而又危险，还有成群的野狗群吠攻击是怎样的一种场面。穷人们一贫如洗，却互帮互助，秉性纯良，充满着爱，生活快乐，团结一致。富人区富人住着豪宅，装潢极尽奢靡之能事，简直是天上与地下的区别。在孟买，警察和帮派是同一种性质的存在，他们也干坏事，收钱做事，但是区别是他们永远在对的一方。 其实此书，某种程度上已经可以成为孟买对外的窗口，当然像里面很多描写，比如警察与黑帮的关系，比如贫民与富人区，比如毒品泛滥等等，应该不是孟买政府愿被别人看到的。 总体而言，我对其评分为第一部5星，第二部4.5星。 ","date":"2018-12-05","objectID":"/posts/2018-12-05-xiangtalan-reading-notes/:0:0","tags":["读书"],"title":"一场孟买的惊心动魄流亡之旅，一本爱的布道书","uri":"/posts/2018-12-05-xiangtalan-reading-notes/"},{"categories":["随笔"],"content":"当我丢了你的时候，我就该找回我自己。 ","date":"2017-05-04","objectID":"/posts/2017-05-04-bikes-college-time/:0:0","tags":["随笔"],"title":"一只斑马的大学时光","uri":"/posts/2017-05-04-bikes-college-time/"},{"categories":["随笔"],"content":"1 仅仅一周的时间，那辆陪我三年多时光穿过无数风淋过无数雨被无数日光拍打过的斑马自行车，没来由的不见了。 没有一点痕迹，这样的猝不及防，我没有一点防备。 还没来得及好好道别，他就已经从我的世界消失得无影无踪了。 这是个悲伤的故事，可是我很平静，也许是他该走的时候了。 虽然我还有小半载的时光还待在这广袤无垠的校园里，虽然他的使命还没能圆满的完成。 在陪我度过了三年半的时光之后，他终究还是辜负了我。 ","date":"2017-05-04","objectID":"/posts/2017-05-04-bikes-college-time/:0:1","tags":["随笔"],"title":"一只斑马的大学时光","uri":"/posts/2017-05-04-bikes-college-time/"},{"categories":["随笔"],"content":"2 我不是没找过他，一次，两次，三次。 我想起了那句古话，事不过三，我就已经知道，我再也找不到他了。 他已经走了，也许是被人驾走了，也许是自己走了，不得而知，谁知道呢。 我摇了摇头，晃了晃脑，隐隐约约，模模糊糊，在搁浅的记忆碎片中，似乎想起了，我最后把他放在楼下的时候，约莫是忘了锁。 而这，应该是我第一，第二，第三次···好吧，也不知是第几次忘了上锁了。 而这，是最后一次丢车，也是第一次丢车。 该来的会来，该走的会走，一点都不愤怒的我停止了摇头晃脑，以免让路过的人误以为我吃了摇头丸。 车不见事小，被人误会了麻烦就大了。 ","date":"2017-05-04","objectID":"/posts/2017-05-04-bikes-college-time/:0:2","tags":["随笔"],"title":"一只斑马的大学时光","uri":"/posts/2017-05-04-bikes-college-time/"},{"categories":["随笔"],"content":"3 我想起了刚到这个城市的时候，背井离乡。 啊，大学！大学！我在内心呐喊着，我来了。 在这之前，我是个没见过世面的人，在这之后，也不见得见过多少世面。 当时充满着新奇、激动与新鲜感的我，在这个偌大的校园里走路，还需要一手拿着巨细靡遗的地图，一边细细揣摩着那些形神巨似的建筑物，做着严丝合缝的匹配。 也就是在这个过程中，我的阅读匹配能力得到了极大的提高，以致于之后我在没有任何准备的情况下，英语四级考试那道匹配题得到良好的发挥，起了关键性重要作用，从而一次性通过了这场考试，这是后话。 到校的第二天，我的斑马自行车，就已经跟了我了。 我还清楚的记得，到校那个晚上，我在师兄的带领下，穿过一条条宽敞的大马路。 我看着这条条形神巨似的沥青马路，心想这条路不是刚才走过吗？ 然后穿过一个铁门，来到了有几个店铺的路上，边上还有一些低矮的楼房。 师兄说：这就是南亭村，很多日用品以后可以来这里买，开学初二手自行车比较抢手。 路边赫然在目的就是好几家自行车店面，门口横陈着两排新车，还有一排旧车。 我们走到了其中一家，问了下二手车，老板努努嘴，指了指那排旧车。 也就是在这个时候，只有两只眼的我仅看了两眼并没有看很多眼，就在车堆里相中了这辆后来跟了我三年多的斑马自行车。 他骨骼清奇，高大硬朗，深灰蓝色，低调深沉，一看就和其他的地摊货不是一路货色。 后来的事实证明了我的眼光精准独到，当周围朋友的二手车在一年内屡屡嘎吱响，散架错位，毛病迭出的时候，我的斑马还是硬朗如初。 我当时检查了下车子，和老板砍了价，买了锁，从此这辆斑马自行车就跟了我，有了主。 ","date":"2017-05-04","objectID":"/posts/2017-05-04-bikes-college-time/:0:3","tags":["随笔"],"title":"一只斑马的大学时光","uri":"/posts/2017-05-04-bikes-college-time/"},{"categories":["随笔"],"content":"4 车跟了我后，在偌大的校园里开始有了我风一样的身影。 在广工这个地广人稠地大物不博的地方，自行车是一种普遍的资产，使得我这个穷逼也有资格说哥是有车一族。 可以说，广工是大学城自行车的国度。 广工有车，车之多，六座教学楼容不下，宿舍楼也容不下。 广工基本的所有的建筑一楼都是架空的，提供放车，这一点足以看出当初设计的人还是有先见之明的。 然而，自行车还是常常溢出到外面的马路上。 每当上下课，西区通往教学楼的路上，人满为患，车满为患，阳气十足，蔚为大观，川流熙攘， 流量极大，成了广工一道独特的风景。 宿舍楼在三饭边上，每每听到刹车声齐鸣，犹如万马齐喑，我就知道钟点了。 在没有手表的时光里，这是我判断时间的重要依据之一。 车流量之大，使得在下午和晚修上下课期间，常常引发塞车事件。 里面的人想出去，外面的人想进来，再加上之前的五饭横亘在那里，每每僵持不下，局面难堪。 这是个比较恶劣的事件。 竟触动到了保安物业当局，他们想出了一个办法。 西一至西四这个宿舍圈改换门庭，把朝向三饭的门关停，改在宿舍圈屁股后面开。 这是个坑爹的主意，使得整个宿舍圈的人出门都要兜个圈子，百转千回一遍。 所以这个主意在当时落实期间引起了圈子的愤怒和反对。 然而，上面说就这样办，下面的我们就只能那样走了。 毕竟是社会主义优秀的接班人。 毕竟也确实缓和了塞车问题。 毕竟我有我的斑马自行车。 ","date":"2017-05-04","objectID":"/posts/2017-05-04-bikes-college-time/:0:4","tags":["随笔"],"title":"一只斑马的大学时光","uri":"/posts/2017-05-04-bikes-college-time/"},{"categories":["随笔"],"content":"5 大二的时候，我曾拍过一个视频，记录岛上生活的。 当时心血来潮，录了两个片段。 一个是记录广工上下课人流的，都是群车飞扬，潇洒帅气。 还有一个是记录华师上下课人流的，都是撑伞漫步，身姿曼妙。 印象深刻的是，有一次，一个外校的同学跑来我们学校，她问我，刚才公车站过来的时候看到路上好多人骑着车，你们今天这是不是有什么活动啊？ 我脑子一转，问她什么时间是否山地车，她说2点多的时候，普通自行车，我内心已了然，笑笑说，那是学生骑车上课的日常。她也哑然一笑。 外来人看来这已然成了不寻常的风景。 ","date":"2017-05-04","objectID":"/posts/2017-05-04-bikes-college-time/:0:5","tags":["随笔"],"title":"一只斑马的大学时光","uri":"/posts/2017-05-04-bikes-college-time/"},{"categories":["随笔"],"content":"6 然而，有人的地方就有江湖，有利益的地方就有人。 广工的自行车和南亭这里也造就了大学城最大的黑车市场。 大学城是个容纳了十所高校高质量人才的地方，但同样也包容了四个自然村。 自然村里可就鱼龙混杂了，本地村民，各种形形色色的外来人口，因了十所高校学生的消费，自然村而兴。 然而，私下的黑色产业链也借机勃发。二手自行车的黑市交易就从未消停过。 在广工，人贼多，车贼多，贼也贼多。 人多并未降低丢车事件的概率，这概率有那么大，就一直那么大，萎缩不了。 我从一踏进校园买单车的那一刻起就已经收到师兄师姐的谆谆善意提醒： 在广工丢车频发，所以买车要注意，放车要注意，越靓越是目标，越值钱越是目标。 这在开学后两周内我两舍友的新车双双不翼而飞的事件中得到了充分而有力的证明。 隔壁舍友两年内丢了四辆，其中三辆是山地。再一次证明了师兄师姐的话是还是要听的。这是后话。 所以我牢记在心。所以我警惕心很强。 所以我买的是斑马自行车是个二手车。 当然，这其中相当大的原因还是因为我是个穷逼。 虽然我的斑马是个二手车，也不知经历过多少任的主人了，但我还是觉得是小偷心目中心仪的对象。 因此买车后不久，我又给它加了一把锁。 每次停车，我都挑在最敞亮的地儿，路边行人的视线之内，亦或是临近保安亭，在保安方圆百米之内。 这是小偷的禁忌之地。 我就不信他们还真有这胆儿，敢在太岁爷上动土。 至少到现在我还是没发现的。 大概也就是跟了我这主人，斑马安安稳稳，从未丢失过。 ","date":"2017-05-04","objectID":"/posts/2017-05-04-bikes-college-time/:0:6","tags":["随笔"],"title":"一只斑马的大学时光","uri":"/posts/2017-05-04-bikes-college-time/"},{"categories":["随笔"],"content":"7 斑马自行车本来不叫斑马的，我对外称它宝马自行车。 宝马是四个轮的。 宝马有股奢侈的贵族气息。 后来，我发现自称宝马的自行车多了去了。 穷逼配宝马，俗气重，逼格低。 所以给它换了称谓，叫斑马。 斑马好吖，不突出，黑白分明。 有这世界最纯粹的两种颜色。 当然我这车并不会因为变了称呼就成黑白两色的，而是蓝灰色的，但它的内心已经高贵而不艳俗了。 换了称谓后，逼格一下子在尘世的俗气中陡然升起，高贵优雅。 ","date":"2017-05-04","objectID":"/posts/2017-05-04-bikes-college-time/:0:7","tags":["随笔"],"title":"一只斑马的大学时光","uri":"/posts/2017-05-04-bikes-college-time/"},{"categories":["随笔"],"content":"8 宋胖子写过一首歌，叫《斑马，斑马》，这是一首有故事的歌。 也契合了我的车，这是一只有故事的马。 ","date":"2017-05-04","objectID":"/posts/2017-05-04-bikes-college-time/:0:8","tags":["随笔"],"title":"一只斑马的大学时光","uri":"/posts/2017-05-04-bikes-college-time/"},{"categories":["随笔"],"content":"9 我的斑马有个结实的后座。 然而，再结实的后座，也抵不过胖子的厚重。 隔壁舍友，没错，就是前面说过的那个曾经丢过四辆单车的胖子，体重160+，肉全都长在胸部极其以下肚腩的部分了，手倒显得瘦瘦的。 在第二次丢车之后，他跟着我上课大半个学期，坐在我的斑马后座。 那么结实的后座，他坐上去竟然会摇晃。这证明了凡事都是相对的。 我每天载着他，从此校园里那风一样的身影不见了，斑马像只老牛一样步履沉沉。 大半个学期后，有一天，骑着骑着我斑马突然呲～呲叫了起来。 我觉得不对劲了，停车一检查，斑马的腿弯了，轮子变形了，磨到旁边车架子了，我立马把胖子拽了下来，说到，胖子，我的斑马已经承受不了你了，腿瘸了。 胖子讪讪的笑着说，没事没事，又不是什么大不了的。我大吼一声，有事，以后载不了你了。 斑马这次的瘸腿让我惆怅好久，修吧好像不能矫正，整个腿换掉吧又是一笔大钱。 于是我将就处理了一下，将两边的螺丝拧了一下调了一下位置，使其没摩擦到。 于是我不敢让我的斑马再驼人了，有点危险，再驼个像胖子这样的胖子走一遭，它的腿可能就彻底废了。 所以就特别注意了。 ","date":"2017-05-04","objectID":"/posts/2017-05-04-bikes-college-time/:0:9","tags":["随笔"],"title":"一只斑马的大学时光","uri":"/posts/2017-05-04-bikes-college-time/"},{"categories":["随笔"],"content":"10 不过，有时候，和瘦瘦的小师妹一起走的时候还是会捎上一程的。 这些风一样的女子，风一吹就能移步的瘦小个。 想来我一只小手指都能拎起来。 当然啦，也有拎不起来的。 比如那几个，帮她们拍照总说把她们腿拍得太粗，各种嫌弃，问题是，这腿本来就粗，我能怎么办，我也很绝望啊。 然后我就看着她们自己捣鼓着自己拍，然后再各种自嗨，这张多好多好。 我一看，还是那么粗，就说不好。 她们就说，你不懂审美。 我笑笑说，你们都很美。 她们反驳说，你心里肯定才不是这样说的，肯定在说我们丑逼。 我笑说， 我委屈啊，说丑被骂，说美也被骂，左右不是人。 因为我一向跟他们怼着来。 人呐，一旦被贴上标签了，想撕掉就不容易了。 之后，我经常猛力夸我的斑马多好多好，她们就把跟我抬杠的嫌弃也复制到了对我的斑马上了。 然而，当我拉着我的斑马，大吼一声，上来不，她们还是有人会屁颠屁颠的上来的。 我的斑马就这样，载过一些二愣子，载过一些傻逼，载过圆的，方的，胖的，瘦的。 不过思量起来，载过的女生十个指头就能数的过来，载过的男生十个指头也数不过来。 总之，它的腿有问题之后，载人就变少了。 直到后来，断了几根钢线，跑起路来晃得特别严重，就去医治了一番，本没报太大希望，以为还是会晃，加了钢丝，调整，没想到收效甚好，矫正了好多，稳定性大增。 它又再次雄姿英发起来，横刀立马。 我又可以载那些拎不动的人了。 校园里又再次有了我风一样的身影。 ","date":"2017-05-04","objectID":"/posts/2017-05-04-bikes-college-time/:0:10","tags":["随笔"],"title":"一只斑马的大学时光","uri":"/posts/2017-05-04-bikes-college-time/"},{"categories":["随笔"],"content":"11 斑马跟了我之后，戎马半生，征服了无数星辰大海。 斑马踏足过的长度，已然和我这小小十来年走过的路，旗鼓相当了。 想起刚入手时，斑马就已经跟我走了一遍外环，那时候，刚来到校园充满着新鲜劲儿，一切都是还那么新奇，我好奇的探索着关于大学的一些，关于大学城的一切。 我驾着斑马，细数着大学城的十所高校的名字，听闻学校大门都在外环，于是从广工的正门出发。 广工的正门相当大气，气势恢宏，一根根霸气的柱子直指苍穹，巍然挺立。 一个巨大的石碑傲然而立在东南角，上面毛主席的大字遒劲有力，赫然在目，“广东工业大学”。 当然，值得说明一点的是，这字是毛体字，却并不是毛主席亲自题写的，而是从毛主席的书法作品中摘取相关字眼合起来的，雅称毛体字，我后来查过，中国百分八九十的高校名字都是毛体字，都是这么摘出来的。 我尤记当时我穿着一件黑色的短袖，这件短袖是我在家乡的镇上的一家专卖店买的，那是我当时买过的最贵的一件衣服，它陪伴了我几年后才退场。 然后我就站在石碑下，手扶着石头，拍了个照，那个照片现在还在我QQ空间里某个相册的第一张。 四年后的一天，我又站在了同一个石头边，穿着半身正装，单独又拍了一个照。此间的年华，有四年，我在第四维的空间里穿行了一遍，没有挪动一点位置，弹指一挥间，我只是，又多了几分年轻的气息。 ","date":"2017-05-04","objectID":"/posts/2017-05-04-bikes-college-time/:0:11","tags":["随笔"],"title":"一只斑马的大学时光","uri":"/posts/2017-05-04-bikes-college-time/"},{"categories":["随笔"],"content":"12 当时，拍完照后，我就从广工正门出发，去领略各个大学风貌。 我往东绕，到达第一个学校是广美，我是很疑惑的，怀疑自己是不是走错了，因为我楞是没找到广美大门，只在保安亭边上看到一行字，广州美术学院。 然后再一直骑，居然到广州大学了，广美的门呢，还是没看到。 可能人家学艺术的，大门都艺术化在无形之中了。 广州大学四个大字题在一个横放的大石头上，这几个字是叶选平题写的，十分正气，不是毛体字了，旁边还刻有广大的校徽。广大环境极其优美，清新可人。其中还坐落着一座商业中心，享尽天时地利。 过了广大，来到北亭广场，北亭广场已经没什么人流，略有点荒凉。 之后，来到华师正门，又是横陈的一块大石头，毛体字赫然在列，然后再是英文名字，South China Normal University，这名字让我怀疑起我的英语水平，南中国正常大学？ Oh，my god，这么多年来可能我我学的是假英语。 不过这英文名字也显示出了人家是向国际化迈进的。 而我对自己学校的英文名字的认识是从381公交车的播音员那里听来的，而且我觉得这个播音员的英语口语亟待提高。 她绝逼是个中国人，她说的还是中国话，她的英语也是中国味儿。 这个381后来改名环线1和环线2，哦，怎奈，英语报站播音还是那个中国味儿。 星海音乐学院正门，也不像正门，一个高高的柱子远远可见，其字高高在上。 正门边的星海音乐厅极富有特色，设计得很有艺术感，优雅，抽象，高端，器宇非凡，气质出众。 艺术总是充满魔力的与诗性的。 接下来就是最富盛名的中大了，中山大学的校门保留了建校时的样貌，三个门规规矩矩 ，尤有民国遗风，上书国立中山大学，这是国父孙中山所题写的。 中大曾是多少学子神往的地方，然而到头来很多也仅仅成了神往而已。 之后就是广外，广东外语外贸大学，这名字挺别扭的，但是广外作为一所语言类非985非211院校，盛名在外也是响当当的。 广外正门校名的字迹，颜色已经与周围融为一体了。 我看了好久愣是没看出来，只得出了一个结论，该重新刷漆了。 广中医和广药在外人看来好像是一个学校一样，不过也是，两个学校都是医药类，生活区和教学区又都是比邻而建，真真有你中有我，我中有你的味道。 大门也都是横放的一个石头，广州中医药大学，广东药学院。 后来2015年，广药成功改名广东药科大学，升级成功。 校名石碑立换，只是宿舍楼上的标牌倒还是旧的没换，写着广东药学院。 换个名也是不容易的，烙印在，新来的迭代，总归是个漫长而麻烦的过程。 外环一圈下来最后一个学校，是华工，华工盛名仅次于中大。出了广东，其实也就中大华工蜚声最大了。 一个工科突出，一个综合实力突出，常常相爱相杀。校训极为相似，甚至校长也是夫妻。 本是同根生。 ","date":"2017-05-04","objectID":"/posts/2017-05-04-bikes-college-time/:0:12","tags":["随笔"],"title":"一只斑马的大学时光","uri":"/posts/2017-05-04-bikes-college-time/"},{"categories":["随笔"],"content":"13 一圈下来，十所高校已经兜完一遍。 我在每所学校面前都拍了一个照，不会摆姿势，站上去low，low的，像个傻逼一个，也许那就是最真实的我。 这之后，我又常常骑着斑马出来兜，这一圈，就是18多公里。 大学城这座岛，当我走的时候，我必将还要再兜一圈，只是已经没有斑马的陪伴了。 平时上课的时候，我的斑马就在教学楼下，下课的时候我的斑马就在图书馆楼下，晚上的时候我的斑马就在宿舍楼下，出城的时候我的斑马就在地铁口边上，它总是会在某一个地方等着我的，直到最后一次，我终究找不到它也找不回它。 在这之前，我其实曾多次找不到它，可能是它在和我捉迷藏吧。 我的记忆有点断层，常常有些东西随手一放，等下就记不起来放哪儿，任凭怎么绞尽脑汁回想，记忆里愣是寻不到半丁点儿痕迹。 所以我的斑马也是，有时往楼下一摆，下来时我就不知摆在哪个点了，然后就开展地毯式搜查，楼下终归也就那几块地方，所以我每每兜一圈，都会峰回路转，见着了斑马，它太调皮了。 然而这终究是个问题。于是我想出了一个办法，顺利的解决了这个问题。 我想，这个方法是可以推而广之的，对我这种间歇性记忆断层的人来说，有极高的研究价值。 它深层次的涉及了记忆机理，这里不再展开讨论。 这个方法是什么呢，很简单。 第一，每次都把车放在固定一个小区域空间里，不要一次停一个地方，这个地方就在脑海里形成停车区间，一定程度上形成了思维定式，而这个定式，是有用的。推广：对生活中常见的物品，大致分类，哪些东西，固定放一个区域，形成习惯，这样，丢三落四就不会出现了，东西就不会经常找不到，目标范围就集中到那个小区间了。 第二，每次停完车后，回头看一眼车的位置，周围附近的特征标记，颜色样貌等，通过有意的对周围丰富的环境进行图像式记忆存储，脑海中下次看看到这些特征标记，马上就能唤醒记忆，唤醒整个场景。推广：对于某些特殊场景，通过建立特征标记，有意识去建立图像式记忆，记忆效果会好很多，并且容易唤醒。 第三，对具体场景进行抽象，并添加联想。这个可以说是对第二中的特征标记进行深入的挖掘，抽象可以简化，抓住核心的东西，联想变得有趣，印象深刻。 这三步，并没有因果关系，都是各自独立的，利用这个方法之后，我就再也没有找不到过我的斑马。 ","date":"2017-05-04","objectID":"/posts/2017-05-04-bikes-college-time/:0:13","tags":["随笔"],"title":"一只斑马的大学时光","uri":"/posts/2017-05-04-bikes-college-time/"},{"categories":["随笔"],"content":"14 我带着斑马，在大学城，走过街串过巷，四个村的村道兜转过。 内环中环外环，我用我的斑马丈量了一遍又一遍。 各个大学里里外外，都穿过。 我是一个走在路上的人，总想看看别处的风景，体验体验不同的生活。 后来，我渐渐明白，我也在自己的风景之中，我的风景也并不一定比别人差多少。 我们走走停停，无非是为了心中的一点向往罢了。 我曾以为我的斑马能陪我走完这四年的时光，我再给它找个老东家，把它送走。 在大三的尾巴上，我还曾看着它感慨，还有一年不到的时光，荏苒相伴，我说我以后会为你写篇文章的。 在最后的学期边上，在我心烦意乱的时刻，斑马离开了我，走得一点声息也没有，我内心居然也颇为平静。看来，有些得与失的东西，我已经慢慢看开了。 剩下来的小半载，我用我的双脚还体会斑马的半生戎马。 它终究没完成它的使命，辜负了我。 我知道一切的开始与结束，都是自然的轮回演进。 ","date":"2017-05-04","objectID":"/posts/2017-05-04-bikes-college-time/:0:14","tags":["随笔"],"title":"一只斑马的大学时光","uri":"/posts/2017-05-04-bikes-college-time/"},{"categories":["随笔"],"content":"15 我走在校园的路上的时候，突然想到， 此生，有些人，有些事，注定要被辜负。 (完) 首发于公众号 工具客栈 ","date":"2017-05-04","objectID":"/posts/2017-05-04-bikes-college-time/:0:15","tags":["随笔"],"title":"一只斑马的大学时光","uri":"/posts/2017-05-04-bikes-college-time/"},{"categories":["随笔"],"content":"我在岁月的长河里，分明看见了爷爷那慈祥的笑容，那品茗的安祥神情，那份悠然与自在，沉淀成了天空最纯粹的深蓝、大地最质朴的乌黑。我深深的怀念着，虔诚地祭奠着。爷爷留给我的所在，我把它放在内心最深处–一缕茶魂。 我看见天际，爷爷那微笑的神情，像涟漪一般，一圈圈的扩散。 记忆中的村庄，除了袅袅的炊烟外，还有悠悠的茶香。 七岁那年，我一咕噜咽下了记忆中我生平的第一杯茶，之所以说是“咽下”，是因为那种小屁孩不曾懂得品的滋味，对我来说可不太好喝，简直难喝，看着我喝完后咋着嘴吐气摇头的样子，一旁的爷爷笑得乐呵呵的，“一点都不甜，难喝死了。”我撅着嘴说道，实在想不明白爷爷为什么整天在捣弄着这玩意儿，还喝得津津有味。爷爷微微摇头，说：“有点苦是吧，茶可不是甜的哦，慢慢喝，才有味道呀，喝茶呀，对这里有好处的呀。”说完指指我的心脏的位置，我吐了吐舌头，听不懂他说的，一溜烟就跑开了，留下他在那里微笑，“你以后就会懂的。”后来，后来呀，我确实懂了，喝茶，养神，养气，养心，冶性怡情。当时一整套茶具就摆在屋子中间，家里穷，很小，就一小间瓦房。但是那套茶具却还是相当精致考究的，杯子是青瓷的，上还有一条条裂缝形状。爷爷常常泡茶，不疾不徐，缓慢优雅，在亲朋好友来做客的时候，还会特意拿出珍藏的铁观音来款亲待友，精神饱满，神采飞扬。 十岁那年，淘气贪玩的我，不小心打碎了爷爷那套名贵的茶具的两个杯子，我惊奇的发现它们并不是沿着之前的裂缝裂开来的，当我还在好奇的探究当中的时候，迎来了父亲生平最严厉的呵斥，当时爷爷不在，从父亲口中我才得知，原来这套茶具是爷爷年轻时花了省吃俭用两年才攒够钱买的，在那艰苦的年代，那是很难想象的，此后他陪伴了爷爷30多年，一直到现在，爷爷一直视之若珍宝。爷爷年轻的时候相当轻狂，争强好胜，又过于轻浮，在现实一次又一次的撞击之下，在阶级斗争中，饱受折磨，痛不欲生，几乎奔溃之际，他有幸找到了精神的寄托，他意外的接触到了一篇关于茶文化和茶精神的文章，写得入木三分，更意外的喝到了一次茶，虽然不知道是什么茶，那入口的清苦，而后微甘，芝兰之气，齿颊留香，给爷爷带去了深深的感触，他猛然感觉茶就是他的人生，他的归宿，个中滋味百千，说不清，道不明，顿觉他的人生还有力量，他就这样与茶相遇了，疯狂的迷上了茶。那么的不可思议，又那么的自然而然，后来呀，我才渐渐明白，把茶和爷爷联系在一起的，是茶魂。打碎茶杯之后，我知道了爷爷的故事，也遭到父亲严厉的责打，同时还战战兢兢的害怕爷爷的新一轮打骂。然而，出乎意料的是，爷爷知道后，居然一点也不生气，和蔼而慈祥的笑容一直在他脸上荡漾着，我感到很诧异，问他为什么不生气，爷爷摇摇头，笑着说：“为什么要生气呀，这茶杯虽然碎了，盛不了茶，但茶的精魂还在那里呀，他不会因为这杯子碎了而碎了呀，茶杯贵贱只是茶杯的事呀。”语言平和中有着宽厚的力量，当时我没听懂。十岁的小孩对很多东西还是一无所知的。现在我大概懂了，爷爷早已看开了，看淡了，唇齿之间的茶味升腾成为他智慧，茶魂给了他新知。 十五岁那年，我喜欢上了喝茶。由七岁的不喜欢到喜欢，我走过八个年头，这一步的跨越可说大也可说小，但是，我只能说，我喜欢喝茶，我迷恋茶的感觉，我能品出他的味道来，但是品不出他的精魂，品不出他的内在力量，品不出他的智慧。爷爷说：“不着急，茶，要慢慢的喝，要慢慢的品，才能喝出他的味道，他更绵长悠远的味道还需岁月的沉淀，慢慢品哟，不着急，将来你会懂得。”这一份韶光，在该来的时候总会来的哟。我总是在梦里梦见，我在小小的茶园旁，看着岁月的河流，叮咚的流着，我轻舀起一小瓢河水，轻轻地煮开，泡开我那壶小小的茶，茶香氤氲，阳光柔柔地照射下来。我轻呷了一口，神情安然自在。 二十岁那年，爷爷走了，轻轻的，走得没有一点声音。我还记得他临走前要我泡一杯茶给他，很普通的茶种就行。他喝完的时候，很满足，很安详，他跟我说：“茶要好好喝，好好喝，好好喝你才会明白的他里面的东西了—茶魂。我跟他走了大辈子了，越来越明白哟。”我感到深深的悲伤，眼泪止不住的流。我会始终记得的，我会始终记得这些话的。 现在，走进茶，走出茶，我想我只是在渐渐的触摸茶魂，而茶魂，你说是什么？你体会到了么？我看着桌面上茶杯里茶水，金黄的色泽鲜亮而透明，像极了上了色的水晶，袅袅上升的水汽在杯面缓缓的升腾，优雅而自在，香气氤氲，弥散开来，轻轻的，柔柔的，我陷入了沉思。 村庄还是往日的村庄，悠悠的茶香依然再继续着他的故事。 我看到天际爷爷的笑容在荡漾开来，一圈一圈。 本文系广东省第五届“我与茶”征文比赛优秀奖。 ","date":"2015-06-03","objectID":"/posts/2015-06-03-tea-soul/:0:0","tags":["随笔"],"title":"茶魂","uri":"/posts/2015-06-03-tea-soul/"}]